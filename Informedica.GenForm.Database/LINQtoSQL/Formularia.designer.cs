#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Informedica.GenForm.Database.ORM.LINQtoSQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Formularium2010")]
	public partial class FormulariaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFormularium(Formularium instance);
    partial void UpdateFormularium(Formularium instance);
    partial void DeleteFormularium(Formularium instance);
    partial void InsertFormulariumAuteur(FormulariumAuteur instance);
    partial void UpdateFormulariumAuteur(FormulariumAuteur instance);
    partial void DeleteFormulariumAuteur(FormulariumAuteur instance);
    partial void InsertFormulariumTekst(FormulariumTekst instance);
    partial void UpdateFormulariumTekst(FormulariumTekst instance);
    partial void DeleteFormulariumTekst(FormulariumTekst instance);
    partial void InsertToepassingGroep(ToepassingGroep instance);
    partial void UpdateToepassingGroep(ToepassingGroep instance);
    partial void DeleteToepassingGroep(ToepassingGroep instance);
    partial void InsertToepassingBijzonderheid(ToepassingBijzonderheid instance);
    partial void UpdateToepassingBijzonderheid(ToepassingBijzonderheid instance);
    partial void DeleteToepassingBijzonderheid(ToepassingBijzonderheid instance);
    partial void InsertArtikelBijzonderheid(ArtikelBijzonderheid instance);
    partial void UpdateArtikelBijzonderheid(ArtikelBijzonderheid instance);
    partial void DeleteArtikelBijzonderheid(ArtikelBijzonderheid instance);
    partial void InsertGeneriekBijzonderheid(GeneriekBijzonderheid instance);
    partial void UpdateGeneriekBijzonderheid(GeneriekBijzonderheid instance);
    partial void DeleteGeneriekBijzonderheid(GeneriekBijzonderheid instance);
    partial void InsertGeneriekDosering(GeneriekDosering instance);
    partial void UpdateGeneriekDosering(GeneriekDosering instance);
    partial void DeleteGeneriekDosering(GeneriekDosering instance);
    partial void InsertDoseringArtikel(DoseringArtikel instance);
    partial void UpdateDoseringArtikel(DoseringArtikel instance);
    partial void DeleteDoseringArtikel(DoseringArtikel instance);
    partial void InsertDoseringRoute(DoseringRoute instance);
    partial void UpdateDoseringRoute(DoseringRoute instance);
    partial void DeleteDoseringRoute(DoseringRoute instance);
    partial void InsertDoseringToepassing(DoseringToepassing instance);
    partial void UpdateDoseringToepassing(DoseringToepassing instance);
    partial void DeleteDoseringToepassing(DoseringToepassing instance);
    partial void InsertTekstItem(TekstItem instance);
    partial void UpdateTekstItem(TekstItem instance);
    partial void DeleteTekstItem(TekstItem instance);
    #endregion
		
		public FormulariaDataContext() : 
				base(global::Informedica.GenForm.Database.ORM.Properties.Settings.Default.Formularium2010ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FormulariaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FormulariaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FormulariaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FormulariaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Formularium> Formulariums
		{
			get
			{
				return this.GetTable<Formularium>();
			}
		}
		
		public System.Data.Linq.Table<FormulariumAuteur> FormulariumAuteurs
		{
			get
			{
				return this.GetTable<FormulariumAuteur>();
			}
		}
		
		public System.Data.Linq.Table<FormulariumTekst> FormulariumTeksts
		{
			get
			{
				return this.GetTable<FormulariumTekst>();
			}
		}
		
		public System.Data.Linq.Table<ToepassingGroep> ToepassingGroeps
		{
			get
			{
				return this.GetTable<ToepassingGroep>();
			}
		}
		
		public System.Data.Linq.Table<ToepassingBijzonderheid> ToepassingBijzonderheids
		{
			get
			{
				return this.GetTable<ToepassingBijzonderheid>();
			}
		}
		
		public System.Data.Linq.Table<ArtikelBijzonderheid> ArtikelBijzonderheids
		{
			get
			{
				return this.GetTable<ArtikelBijzonderheid>();
			}
		}
		
		public System.Data.Linq.Table<GeneriekBijzonderheid> GeneriekBijzonderheids
		{
			get
			{
				return this.GetTable<GeneriekBijzonderheid>();
			}
		}
		
		public System.Data.Linq.Table<GeneriekDosering> GeneriekDoserings
		{
			get
			{
				return this.GetTable<GeneriekDosering>();
			}
		}
		
		public System.Data.Linq.Table<DoseringArtikel> DoseringArtikels
		{
			get
			{
				return this.GetTable<DoseringArtikel>();
			}
		}
		
		public System.Data.Linq.Table<DoseringRoute> DoseringRoutes
		{
			get
			{
				return this.GetTable<DoseringRoute>();
			}
		}
		
		public System.Data.Linq.Table<DoseringToepassing> DoseringToepassings
		{
			get
			{
				return this.GetTable<DoseringToepassing>();
			}
		}
		
		public System.Data.Linq.Table<TekstItem> TekstItems
		{
			get
			{
				return this.GetTable<TekstItem>();
			}
		}
	}
	
	[Table(Name="dbo.Formularium")]
	public partial class Formularium : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _formulariumId;
		
		private string _naam;
		
		private System.Data.Linq.Binary _versieTimeStamp;
		
		private int _apotheekId;
		
		private int _hoofdauteur;
		
		private EntitySet<FormulariumAuteur> _FormulariumAuteurs;
		
		private EntitySet<FormulariumTekst> _FormulariumTeksts;
		
		private EntitySet<ToepassingGroep> _ToepassingGroeps;
		
		private EntitySet<ToepassingBijzonderheid> _ToepassingBijzonderheids;
		
		private EntitySet<ArtikelBijzonderheid> _ArtikelBijzonderheids;
		
		private EntitySet<GeneriekBijzonderheid> _GeneriekBijzonderheids;
		
		private EntitySet<GeneriekDosering> _GeneriekDoserings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnformulariumIdChanging(int value);
    partial void OnformulariumIdChanged();
    partial void OnnaamChanging(string value);
    partial void OnnaamChanged();
    partial void OnversieTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnversieTimeStampChanged();
    partial void OnapotheekIdChanging(int value);
    partial void OnapotheekIdChanged();
    partial void OnhoofdauteurChanging(int value);
    partial void OnhoofdauteurChanged();
    #endregion
		
		public Formularium()
		{
			this._FormulariumAuteurs = new EntitySet<FormulariumAuteur>(new Action<FormulariumAuteur>(this.attach_FormulariumAuteurs), new Action<FormulariumAuteur>(this.detach_FormulariumAuteurs));
			this._FormulariumTeksts = new EntitySet<FormulariumTekst>(new Action<FormulariumTekst>(this.attach_FormulariumTeksts), new Action<FormulariumTekst>(this.detach_FormulariumTeksts));
			this._ToepassingGroeps = new EntitySet<ToepassingGroep>(new Action<ToepassingGroep>(this.attach_ToepassingGroeps), new Action<ToepassingGroep>(this.detach_ToepassingGroeps));
			this._ToepassingBijzonderheids = new EntitySet<ToepassingBijzonderheid>(new Action<ToepassingBijzonderheid>(this.attach_ToepassingBijzonderheids), new Action<ToepassingBijzonderheid>(this.detach_ToepassingBijzonderheids));
			this._ArtikelBijzonderheids = new EntitySet<ArtikelBijzonderheid>(new Action<ArtikelBijzonderheid>(this.attach_ArtikelBijzonderheids), new Action<ArtikelBijzonderheid>(this.detach_ArtikelBijzonderheids));
			this._GeneriekBijzonderheids = new EntitySet<GeneriekBijzonderheid>(new Action<GeneriekBijzonderheid>(this.attach_GeneriekBijzonderheids), new Action<GeneriekBijzonderheid>(this.detach_GeneriekBijzonderheids));
			this._GeneriekDoserings = new EntitySet<GeneriekDosering>(new Action<GeneriekDosering>(this.attach_GeneriekDoserings), new Action<GeneriekDosering>(this.detach_GeneriekDoserings));
			OnCreated();
		}
		
		[Column(Storage="_formulariumId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int formulariumId
		{
			get
			{
				return this._formulariumId;
			}
			set
			{
				if ((this._formulariumId != value))
				{
					this.OnformulariumIdChanging(value);
					this.SendPropertyChanging();
					this._formulariumId = value;
					this.SendPropertyChanged("formulariumId");
					this.OnformulariumIdChanged();
				}
			}
		}
		
		[Column(Storage="_naam", DbType="NVarChar(125) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string naam
		{
			get
			{
				return this._naam;
			}
			set
			{
				if ((this._naam != value))
				{
					this.OnnaamChanging(value);
					this.SendPropertyChanging();
					this._naam = value;
					this.SendPropertyChanged("naam");
					this.OnnaamChanged();
				}
			}
		}
		
		[Column(Storage="_versieTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary versieTimeStamp
		{
			get
			{
				return this._versieTimeStamp;
			}
			set
			{
				if ((this._versieTimeStamp != value))
				{
					this.OnversieTimeStampChanging(value);
					this.SendPropertyChanging();
					this._versieTimeStamp = value;
					this.SendPropertyChanged("versieTimeStamp");
					this.OnversieTimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_apotheekId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int apotheekId
		{
			get
			{
				return this._apotheekId;
			}
			set
			{
				if ((this._apotheekId != value))
				{
					this.OnapotheekIdChanging(value);
					this.SendPropertyChanging();
					this._apotheekId = value;
					this.SendPropertyChanged("apotheekId");
					this.OnapotheekIdChanged();
				}
			}
		}
		
		[Column(Storage="_hoofdauteur", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int hoofdauteur
		{
			get
			{
				return this._hoofdauteur;
			}
			set
			{
				if ((this._hoofdauteur != value))
				{
					this.OnhoofdauteurChanging(value);
					this.SendPropertyChanging();
					this._hoofdauteur = value;
					this.SendPropertyChanged("hoofdauteur");
					this.OnhoofdauteurChanged();
				}
			}
		}
		
		[Association(Name="Formularium_FormulariumAuteur", Storage="_FormulariumAuteurs", ThisKey="formulariumId", OtherKey="formulariumId")]
		public EntitySet<FormulariumAuteur> FormulariumAuteurs
		{
			get
			{
				return this._FormulariumAuteurs;
			}
			set
			{
				this._FormulariumAuteurs.Assign(value);
			}
		}
		
		[Association(Name="Formularium_FormulariumTekst", Storage="_FormulariumTeksts", ThisKey="formulariumId", OtherKey="formulariumId")]
		public EntitySet<FormulariumTekst> FormulariumTeksts
		{
			get
			{
				return this._FormulariumTeksts;
			}
			set
			{
				this._FormulariumTeksts.Assign(value);
			}
		}
		
		[Association(Name="Formularium_ToepassingGroep", Storage="_ToepassingGroeps", ThisKey="formulariumId", OtherKey="formulariumId")]
		public EntitySet<ToepassingGroep> ToepassingGroeps
		{
			get
			{
				return this._ToepassingGroeps;
			}
			set
			{
				this._ToepassingGroeps.Assign(value);
			}
		}
		
		[Association(Name="Formularium_ToepassingBijzonderheid", Storage="_ToepassingBijzonderheids", ThisKey="formulariumId", OtherKey="formulariumId")]
		public EntitySet<ToepassingBijzonderheid> ToepassingBijzonderheids
		{
			get
			{
				return this._ToepassingBijzonderheids;
			}
			set
			{
				this._ToepassingBijzonderheids.Assign(value);
			}
		}
		
		[Association(Name="Formularium_ArtikelBijzonderheid", Storage="_ArtikelBijzonderheids", ThisKey="formulariumId", OtherKey="formulariumId")]
		public EntitySet<ArtikelBijzonderheid> ArtikelBijzonderheids
		{
			get
			{
				return this._ArtikelBijzonderheids;
			}
			set
			{
				this._ArtikelBijzonderheids.Assign(value);
			}
		}
		
		[Association(Name="Formularium_GeneriekBijzonderheid", Storage="_GeneriekBijzonderheids", ThisKey="formulariumId", OtherKey="formulariumId")]
		public EntitySet<GeneriekBijzonderheid> GeneriekBijzonderheids
		{
			get
			{
				return this._GeneriekBijzonderheids;
			}
			set
			{
				this._GeneriekBijzonderheids.Assign(value);
			}
		}
		
		[Association(Name="Formularium_GeneriekDosering", Storage="_GeneriekDoserings", ThisKey="formulariumId", OtherKey="formulariumId")]
		public EntitySet<GeneriekDosering> GeneriekDoserings
		{
			get
			{
				return this._GeneriekDoserings;
			}
			set
			{
				this._GeneriekDoserings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FormulariumAuteurs(FormulariumAuteur entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = this;
		}
		
		private void detach_FormulariumAuteurs(FormulariumAuteur entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = null;
		}
		
		private void attach_FormulariumTeksts(FormulariumTekst entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = this;
		}
		
		private void detach_FormulariumTeksts(FormulariumTekst entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = null;
		}
		
		private void attach_ToepassingGroeps(ToepassingGroep entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = this;
		}
		
		private void detach_ToepassingGroeps(ToepassingGroep entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = null;
		}
		
		private void attach_ToepassingBijzonderheids(ToepassingBijzonderheid entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = this;
		}
		
		private void detach_ToepassingBijzonderheids(ToepassingBijzonderheid entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = null;
		}
		
		private void attach_ArtikelBijzonderheids(ArtikelBijzonderheid entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = this;
		}
		
		private void detach_ArtikelBijzonderheids(ArtikelBijzonderheid entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = null;
		}
		
		private void attach_GeneriekBijzonderheids(GeneriekBijzonderheid entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = this;
		}
		
		private void detach_GeneriekBijzonderheids(GeneriekBijzonderheid entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = null;
		}
		
		private void attach_GeneriekDoserings(GeneriekDosering entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = this;
		}
		
		private void detach_GeneriekDoserings(GeneriekDosering entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = null;
		}
	}
	
	[Table(Name="dbo.FormulariumAuteur")]
	public partial class FormulariumAuteur : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _formulariumAuteurId;
		
		private int _auteur;
		
		private int _formulariumId;
		
		private EntityRef<Formularium> _Formularium;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnformulariumAuteurIdChanging(int value);
    partial void OnformulariumAuteurIdChanged();
    partial void OnauteurChanging(int value);
    partial void OnauteurChanged();
    partial void OnformulariumIdChanging(int value);
    partial void OnformulariumIdChanged();
    #endregion
		
		public FormulariumAuteur()
		{
			this._Formularium = default(EntityRef<Formularium>);
			OnCreated();
		}
		
		[Column(Storage="_formulariumAuteurId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int formulariumAuteurId
		{
			get
			{
				return this._formulariumAuteurId;
			}
			set
			{
				if ((this._formulariumAuteurId != value))
				{
					this.OnformulariumAuteurIdChanging(value);
					this.SendPropertyChanging();
					this._formulariumAuteurId = value;
					this.SendPropertyChanged("formulariumAuteurId");
					this.OnformulariumAuteurIdChanged();
				}
			}
		}
		
		[Column(Storage="_auteur", DbType="Int NOT NULL")]
		public int auteur
		{
			get
			{
				return this._auteur;
			}
			set
			{
				if ((this._auteur != value))
				{
					this.OnauteurChanging(value);
					this.SendPropertyChanging();
					this._auteur = value;
					this.SendPropertyChanged("auteur");
					this.OnauteurChanged();
				}
			}
		}
		
		[Column(Storage="_formulariumId", DbType="Int NOT NULL")]
		public int formulariumId
		{
			get
			{
				return this._formulariumId;
			}
			set
			{
				if ((this._formulariumId != value))
				{
					if (this._Formularium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnformulariumIdChanging(value);
					this.SendPropertyChanging();
					this._formulariumId = value;
					this.SendPropertyChanged("formulariumId");
					this.OnformulariumIdChanged();
				}
			}
		}
		
		[Association(Name="Formularium_FormulariumAuteur", Storage="_Formularium", ThisKey="formulariumId", OtherKey="formulariumId", IsForeignKey=true)]
		public Formularium Formularium
		{
			get
			{
				return this._Formularium.Entity;
			}
			set
			{
				Formularium previousValue = this._Formularium.Entity;
				if (((previousValue != value) 
							|| (this._Formularium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formularium.Entity = null;
						previousValue.FormulariumAuteurs.Remove(this);
					}
					this._Formularium.Entity = value;
					if ((value != null))
					{
						value.FormulariumAuteurs.Add(this);
						this._formulariumId = value.formulariumId;
					}
					else
					{
						this._formulariumId = default(int);
					}
					this.SendPropertyChanged("Formularium");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FormulariumTekst")]
	public partial class FormulariumTekst : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _formulariumTekstId;
		
		private int _formulariumId;
		
		private int _tekstItemId;
		
		private EntityRef<Formularium> _Formularium;
		
		private EntityRef<TekstItem> _TekstItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnformulariumTekstIdChanging(int value);
    partial void OnformulariumTekstIdChanged();
    partial void OnformulariumIdChanging(int value);
    partial void OnformulariumIdChanged();
    partial void OntekstItemIdChanging(int value);
    partial void OntekstItemIdChanged();
    #endregion
		
		public FormulariumTekst()
		{
			this._Formularium = default(EntityRef<Formularium>);
			this._TekstItem = default(EntityRef<TekstItem>);
			OnCreated();
		}
		
		[Column(Storage="_formulariumTekstId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int formulariumTekstId
		{
			get
			{
				return this._formulariumTekstId;
			}
			set
			{
				if ((this._formulariumTekstId != value))
				{
					this.OnformulariumTekstIdChanging(value);
					this.SendPropertyChanging();
					this._formulariumTekstId = value;
					this.SendPropertyChanged("formulariumTekstId");
					this.OnformulariumTekstIdChanged();
				}
			}
		}
		
		[Column(Storage="_formulariumId", DbType="Int NOT NULL")]
		public int formulariumId
		{
			get
			{
				return this._formulariumId;
			}
			set
			{
				if ((this._formulariumId != value))
				{
					if (this._Formularium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnformulariumIdChanging(value);
					this.SendPropertyChanging();
					this._formulariumId = value;
					this.SendPropertyChanged("formulariumId");
					this.OnformulariumIdChanged();
				}
			}
		}
		
		[Column(Storage="_tekstItemId", DbType="Int NOT NULL")]
		public int tekstItemId
		{
			get
			{
				return this._tekstItemId;
			}
			set
			{
				if ((this._tekstItemId != value))
				{
					if (this._TekstItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntekstItemIdChanging(value);
					this.SendPropertyChanging();
					this._tekstItemId = value;
					this.SendPropertyChanged("tekstItemId");
					this.OntekstItemIdChanged();
				}
			}
		}
		
		[Association(Name="Formularium_FormulariumTekst", Storage="_Formularium", ThisKey="formulariumId", OtherKey="formulariumId", IsForeignKey=true)]
		public Formularium Formularium
		{
			get
			{
				return this._Formularium.Entity;
			}
			set
			{
				Formularium previousValue = this._Formularium.Entity;
				if (((previousValue != value) 
							|| (this._Formularium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formularium.Entity = null;
						previousValue.FormulariumTeksts.Remove(this);
					}
					this._Formularium.Entity = value;
					if ((value != null))
					{
						value.FormulariumTeksts.Add(this);
						this._formulariumId = value.formulariumId;
					}
					else
					{
						this._formulariumId = default(int);
					}
					this.SendPropertyChanged("Formularium");
				}
			}
		}
		
		[Association(Name="TekstItem_FormulariumTekst", Storage="_TekstItem", ThisKey="tekstItemId", OtherKey="tekstItemId", IsForeignKey=true)]
		public TekstItem TekstItem
		{
			get
			{
				return this._TekstItem.Entity;
			}
			set
			{
				TekstItem previousValue = this._TekstItem.Entity;
				if (((previousValue != value) 
							|| (this._TekstItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TekstItem.Entity = null;
						previousValue.FormulariumTeksts.Remove(this);
					}
					this._TekstItem.Entity = value;
					if ((value != null))
					{
						value.FormulariumTeksts.Add(this);
						this._tekstItemId = value.tekstItemId;
					}
					else
					{
						this._tekstItemId = default(int);
					}
					this.SendPropertyChanged("TekstItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ToepassingGroep")]
	public partial class ToepassingGroep : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _toepassingGroepId;
		
		private string _naam;
		
		private System.Data.Linq.Binary _versieTimeStamp;
		
		private System.Nullable<int> _formulariumId;
		
		private System.Nullable<int> _hoofdGroep;
		
		private EntitySet<ToepassingGroep> _ToepassingGroeps;
		
		private EntitySet<ToepassingBijzonderheid> _ToepassingBijzonderheids;
		
		private EntitySet<DoseringToepassing> _DoseringToepassings;
		
		private EntityRef<Formularium> _Formularium;
		
		private EntityRef<ToepassingGroep> _ToepassingGroep1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntoepassingGroepIdChanging(int value);
    partial void OntoepassingGroepIdChanged();
    partial void OnnaamChanging(string value);
    partial void OnnaamChanged();
    partial void OnversieTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnversieTimeStampChanged();
    partial void OnformulariumIdChanging(System.Nullable<int> value);
    partial void OnformulariumIdChanged();
    partial void OnhoofdGroepChanging(System.Nullable<int> value);
    partial void OnhoofdGroepChanged();
    #endregion
		
		public ToepassingGroep()
		{
			this._ToepassingGroeps = new EntitySet<ToepassingGroep>(new Action<ToepassingGroep>(this.attach_ToepassingGroeps), new Action<ToepassingGroep>(this.detach_ToepassingGroeps));
			this._ToepassingBijzonderheids = new EntitySet<ToepassingBijzonderheid>(new Action<ToepassingBijzonderheid>(this.attach_ToepassingBijzonderheids), new Action<ToepassingBijzonderheid>(this.detach_ToepassingBijzonderheids));
			this._DoseringToepassings = new EntitySet<DoseringToepassing>(new Action<DoseringToepassing>(this.attach_DoseringToepassings), new Action<DoseringToepassing>(this.detach_DoseringToepassings));
			this._Formularium = default(EntityRef<Formularium>);
			this._ToepassingGroep1 = default(EntityRef<ToepassingGroep>);
			OnCreated();
		}
		
		[Column(Storage="_toepassingGroepId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int toepassingGroepId
		{
			get
			{
				return this._toepassingGroepId;
			}
			set
			{
				if ((this._toepassingGroepId != value))
				{
					this.OntoepassingGroepIdChanging(value);
					this.SendPropertyChanging();
					this._toepassingGroepId = value;
					this.SendPropertyChanged("toepassingGroepId");
					this.OntoepassingGroepIdChanged();
				}
			}
		}
		
		[Column(Storage="_naam", DbType="NChar(125) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string naam
		{
			get
			{
				return this._naam;
			}
			set
			{
				if ((this._naam != value))
				{
					this.OnnaamChanging(value);
					this.SendPropertyChanging();
					this._naam = value;
					this.SendPropertyChanged("naam");
					this.OnnaamChanged();
				}
			}
		}
		
		[Column(Storage="_versieTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary versieTimeStamp
		{
			get
			{
				return this._versieTimeStamp;
			}
			set
			{
				if ((this._versieTimeStamp != value))
				{
					this.OnversieTimeStampChanging(value);
					this.SendPropertyChanging();
					this._versieTimeStamp = value;
					this.SendPropertyChanged("versieTimeStamp");
					this.OnversieTimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_formulariumId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> formulariumId
		{
			get
			{
				return this._formulariumId;
			}
			set
			{
				if ((this._formulariumId != value))
				{
					if (this._Formularium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnformulariumIdChanging(value);
					this.SendPropertyChanging();
					this._formulariumId = value;
					this.SendPropertyChanged("formulariumId");
					this.OnformulariumIdChanged();
				}
			}
		}
		
		[Column(Storage="_hoofdGroep", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> hoofdGroep
		{
			get
			{
				return this._hoofdGroep;
			}
			set
			{
				if ((this._hoofdGroep != value))
				{
					if (this._ToepassingGroep1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnhoofdGroepChanging(value);
					this.SendPropertyChanging();
					this._hoofdGroep = value;
					this.SendPropertyChanged("hoofdGroep");
					this.OnhoofdGroepChanged();
				}
			}
		}
		
		[Association(Name="ToepassingGroep_ToepassingGroep", Storage="_ToepassingGroeps", ThisKey="toepassingGroepId", OtherKey="hoofdGroep")]
		public EntitySet<ToepassingGroep> ToepassingGroeps
		{
			get
			{
				return this._ToepassingGroeps;
			}
			set
			{
				this._ToepassingGroeps.Assign(value);
			}
		}
		
		[Association(Name="ToepassingGroep_ToepassingBijzonderheid", Storage="_ToepassingBijzonderheids", ThisKey="toepassingGroepId", OtherKey="toepassingGroepId")]
		public EntitySet<ToepassingBijzonderheid> ToepassingBijzonderheids
		{
			get
			{
				return this._ToepassingBijzonderheids;
			}
			set
			{
				this._ToepassingBijzonderheids.Assign(value);
			}
		}
		
		[Association(Name="ToepassingGroep_DoseringToepassing", Storage="_DoseringToepassings", ThisKey="toepassingGroepId", OtherKey="toepassingGroepId")]
		public EntitySet<DoseringToepassing> DoseringToepassings
		{
			get
			{
				return this._DoseringToepassings;
			}
			set
			{
				this._DoseringToepassings.Assign(value);
			}
		}
		
		[Association(Name="Formularium_ToepassingGroep", Storage="_Formularium", ThisKey="formulariumId", OtherKey="formulariumId", IsForeignKey=true)]
		public Formularium Formularium
		{
			get
			{
				return this._Formularium.Entity;
			}
			set
			{
				Formularium previousValue = this._Formularium.Entity;
				if (((previousValue != value) 
							|| (this._Formularium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formularium.Entity = null;
						previousValue.ToepassingGroeps.Remove(this);
					}
					this._Formularium.Entity = value;
					if ((value != null))
					{
						value.ToepassingGroeps.Add(this);
						this._formulariumId = value.formulariumId;
					}
					else
					{
						this._formulariumId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Formularium");
				}
			}
		}
		
		[Association(Name="ToepassingGroep_ToepassingGroep", Storage="_ToepassingGroep1", ThisKey="hoofdGroep", OtherKey="toepassingGroepId", IsForeignKey=true)]
		public ToepassingGroep ToepassingGroep1
		{
			get
			{
				return this._ToepassingGroep1.Entity;
			}
			set
			{
				ToepassingGroep previousValue = this._ToepassingGroep1.Entity;
				if (((previousValue != value) 
							|| (this._ToepassingGroep1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToepassingGroep1.Entity = null;
						previousValue.ToepassingGroeps.Remove(this);
					}
					this._ToepassingGroep1.Entity = value;
					if ((value != null))
					{
						value.ToepassingGroeps.Add(this);
						this._hoofdGroep = value.toepassingGroepId;
					}
					else
					{
						this._hoofdGroep = default(Nullable<int>);
					}
					this.SendPropertyChanged("ToepassingGroep1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ToepassingGroeps(ToepassingGroep entity)
		{
			this.SendPropertyChanging();
			entity.ToepassingGroep1 = this;
		}
		
		private void detach_ToepassingGroeps(ToepassingGroep entity)
		{
			this.SendPropertyChanging();
			entity.ToepassingGroep1 = null;
		}
		
		private void attach_ToepassingBijzonderheids(ToepassingBijzonderheid entity)
		{
			this.SendPropertyChanging();
			entity.ToepassingGroep = this;
		}
		
		private void detach_ToepassingBijzonderheids(ToepassingBijzonderheid entity)
		{
			this.SendPropertyChanging();
			entity.ToepassingGroep = null;
		}
		
		private void attach_DoseringToepassings(DoseringToepassing entity)
		{
			this.SendPropertyChanging();
			entity.ToepassingGroep = this;
		}
		
		private void detach_DoseringToepassings(DoseringToepassing entity)
		{
			this.SendPropertyChanging();
			entity.ToepassingGroep = null;
		}
	}
	
	[Table(Name="dbo.ToepassingBijzonderheid")]
	public partial class ToepassingBijzonderheid : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _toepassingBijzonderheidId;
		
		private int _toepassingGroepId;
		
		private int _formulariumId;
		
		private int _tekstItemId;
		
		private EntityRef<ToepassingGroep> _ToepassingGroep;
		
		private EntityRef<Formularium> _Formularium;
		
		private EntityRef<TekstItem> _TekstItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntoepassingBijzonderheidIdChanging(int value);
    partial void OntoepassingBijzonderheidIdChanged();
    partial void OntoepassingGroepIdChanging(int value);
    partial void OntoepassingGroepIdChanged();
    partial void OnformulariumIdChanging(int value);
    partial void OnformulariumIdChanged();
    partial void OntekstItemIdChanging(int value);
    partial void OntekstItemIdChanged();
    #endregion
		
		public ToepassingBijzonderheid()
		{
			this._ToepassingGroep = default(EntityRef<ToepassingGroep>);
			this._Formularium = default(EntityRef<Formularium>);
			this._TekstItem = default(EntityRef<TekstItem>);
			OnCreated();
		}
		
		[Column(Storage="_toepassingBijzonderheidId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int toepassingBijzonderheidId
		{
			get
			{
				return this._toepassingBijzonderheidId;
			}
			set
			{
				if ((this._toepassingBijzonderheidId != value))
				{
					this.OntoepassingBijzonderheidIdChanging(value);
					this.SendPropertyChanging();
					this._toepassingBijzonderheidId = value;
					this.SendPropertyChanged("toepassingBijzonderheidId");
					this.OntoepassingBijzonderheidIdChanged();
				}
			}
		}
		
		[Column(Storage="_toepassingGroepId", DbType="Int NOT NULL")]
		public int toepassingGroepId
		{
			get
			{
				return this._toepassingGroepId;
			}
			set
			{
				if ((this._toepassingGroepId != value))
				{
					if (this._ToepassingGroep.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntoepassingGroepIdChanging(value);
					this.SendPropertyChanging();
					this._toepassingGroepId = value;
					this.SendPropertyChanged("toepassingGroepId");
					this.OntoepassingGroepIdChanged();
				}
			}
		}
		
		[Column(Storage="_formulariumId", DbType="Int NOT NULL")]
		public int formulariumId
		{
			get
			{
				return this._formulariumId;
			}
			set
			{
				if ((this._formulariumId != value))
				{
					if (this._Formularium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnformulariumIdChanging(value);
					this.SendPropertyChanging();
					this._formulariumId = value;
					this.SendPropertyChanged("formulariumId");
					this.OnformulariumIdChanged();
				}
			}
		}
		
		[Column(Storage="_tekstItemId", DbType="Int NOT NULL")]
		public int tekstItemId
		{
			get
			{
				return this._tekstItemId;
			}
			set
			{
				if ((this._tekstItemId != value))
				{
					if (this._TekstItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntekstItemIdChanging(value);
					this.SendPropertyChanging();
					this._tekstItemId = value;
					this.SendPropertyChanged("tekstItemId");
					this.OntekstItemIdChanged();
				}
			}
		}
		
		[Association(Name="ToepassingGroep_ToepassingBijzonderheid", Storage="_ToepassingGroep", ThisKey="toepassingGroepId", OtherKey="toepassingGroepId", IsForeignKey=true)]
		public ToepassingGroep ToepassingGroep
		{
			get
			{
				return this._ToepassingGroep.Entity;
			}
			set
			{
				ToepassingGroep previousValue = this._ToepassingGroep.Entity;
				if (((previousValue != value) 
							|| (this._ToepassingGroep.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToepassingGroep.Entity = null;
						previousValue.ToepassingBijzonderheids.Remove(this);
					}
					this._ToepassingGroep.Entity = value;
					if ((value != null))
					{
						value.ToepassingBijzonderheids.Add(this);
						this._toepassingGroepId = value.toepassingGroepId;
					}
					else
					{
						this._toepassingGroepId = default(int);
					}
					this.SendPropertyChanged("ToepassingGroep");
				}
			}
		}
		
		[Association(Name="Formularium_ToepassingBijzonderheid", Storage="_Formularium", ThisKey="formulariumId", OtherKey="formulariumId", IsForeignKey=true)]
		public Formularium Formularium
		{
			get
			{
				return this._Formularium.Entity;
			}
			set
			{
				Formularium previousValue = this._Formularium.Entity;
				if (((previousValue != value) 
							|| (this._Formularium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formularium.Entity = null;
						previousValue.ToepassingBijzonderheids.Remove(this);
					}
					this._Formularium.Entity = value;
					if ((value != null))
					{
						value.ToepassingBijzonderheids.Add(this);
						this._formulariumId = value.formulariumId;
					}
					else
					{
						this._formulariumId = default(int);
					}
					this.SendPropertyChanged("Formularium");
				}
			}
		}
		
		[Association(Name="TekstItem_ToepassingBijzonderheid", Storage="_TekstItem", ThisKey="tekstItemId", OtherKey="tekstItemId", IsForeignKey=true)]
		public TekstItem TekstItem
		{
			get
			{
				return this._TekstItem.Entity;
			}
			set
			{
				TekstItem previousValue = this._TekstItem.Entity;
				if (((previousValue != value) 
							|| (this._TekstItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TekstItem.Entity = null;
						previousValue.ToepassingBijzonderheids.Remove(this);
					}
					this._TekstItem.Entity = value;
					if ((value != null))
					{
						value.ToepassingBijzonderheids.Add(this);
						this._tekstItemId = value.tekstItemId;
					}
					else
					{
						this._tekstItemId = default(int);
					}
					this.SendPropertyChanged("TekstItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ArtikelBijzonderheid")]
	public partial class ArtikelBijzonderheid : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _artikelBijzonderheidId;
		
		private int _artikelId;
		
		private int _formulariumId;
		
		private int _tekstItemId;
		
		private EntityRef<Formularium> _Formularium;
		
		private EntityRef<TekstItem> _TekstItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnartikelBijzonderheidIdChanging(int value);
    partial void OnartikelBijzonderheidIdChanged();
    partial void OnartikelIdChanging(int value);
    partial void OnartikelIdChanged();
    partial void OnformulariumIdChanging(int value);
    partial void OnformulariumIdChanged();
    partial void OntekstItemIdChanging(int value);
    partial void OntekstItemIdChanged();
    #endregion
		
		public ArtikelBijzonderheid()
		{
			this._Formularium = default(EntityRef<Formularium>);
			this._TekstItem = default(EntityRef<TekstItem>);
			OnCreated();
		}
		
		[Column(Storage="_artikelBijzonderheidId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int artikelBijzonderheidId
		{
			get
			{
				return this._artikelBijzonderheidId;
			}
			set
			{
				if ((this._artikelBijzonderheidId != value))
				{
					this.OnartikelBijzonderheidIdChanging(value);
					this.SendPropertyChanging();
					this._artikelBijzonderheidId = value;
					this.SendPropertyChanged("artikelBijzonderheidId");
					this.OnartikelBijzonderheidIdChanged();
				}
			}
		}
		
		[Column(Storage="_artikelId", DbType="Int NOT NULL")]
		public int artikelId
		{
			get
			{
				return this._artikelId;
			}
			set
			{
				if ((this._artikelId != value))
				{
					this.OnartikelIdChanging(value);
					this.SendPropertyChanging();
					this._artikelId = value;
					this.SendPropertyChanged("artikelId");
					this.OnartikelIdChanged();
				}
			}
		}
		
		[Column(Storage="_formulariumId", DbType="Int NOT NULL")]
		public int formulariumId
		{
			get
			{
				return this._formulariumId;
			}
			set
			{
				if ((this._formulariumId != value))
				{
					if (this._Formularium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnformulariumIdChanging(value);
					this.SendPropertyChanging();
					this._formulariumId = value;
					this.SendPropertyChanged("formulariumId");
					this.OnformulariumIdChanged();
				}
			}
		}
		
		[Column(Storage="_tekstItemId", DbType="Int NOT NULL")]
		public int tekstItemId
		{
			get
			{
				return this._tekstItemId;
			}
			set
			{
				if ((this._tekstItemId != value))
				{
					if (this._TekstItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntekstItemIdChanging(value);
					this.SendPropertyChanging();
					this._tekstItemId = value;
					this.SendPropertyChanged("tekstItemId");
					this.OntekstItemIdChanged();
				}
			}
		}
		
		[Association(Name="Formularium_ArtikelBijzonderheid", Storage="_Formularium", ThisKey="formulariumId", OtherKey="formulariumId", IsForeignKey=true)]
		public Formularium Formularium
		{
			get
			{
				return this._Formularium.Entity;
			}
			set
			{
				Formularium previousValue = this._Formularium.Entity;
				if (((previousValue != value) 
							|| (this._Formularium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formularium.Entity = null;
						previousValue.ArtikelBijzonderheids.Remove(this);
					}
					this._Formularium.Entity = value;
					if ((value != null))
					{
						value.ArtikelBijzonderheids.Add(this);
						this._formulariumId = value.formulariumId;
					}
					else
					{
						this._formulariumId = default(int);
					}
					this.SendPropertyChanged("Formularium");
				}
			}
		}
		
		[Association(Name="TekstItem_ArtikelBijzonderheid", Storage="_TekstItem", ThisKey="tekstItemId", OtherKey="tekstItemId", IsForeignKey=true)]
		public TekstItem TekstItem
		{
			get
			{
				return this._TekstItem.Entity;
			}
			set
			{
				TekstItem previousValue = this._TekstItem.Entity;
				if (((previousValue != value) 
							|| (this._TekstItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TekstItem.Entity = null;
						previousValue.ArtikelBijzonderheids.Remove(this);
					}
					this._TekstItem.Entity = value;
					if ((value != null))
					{
						value.ArtikelBijzonderheids.Add(this);
						this._tekstItemId = value.tekstItemId;
					}
					else
					{
						this._tekstItemId = default(int);
					}
					this.SendPropertyChanged("TekstItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.GeneriekBijzonderheid")]
	public partial class GeneriekBijzonderheid : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _generiekBijzonderheidId;
		
		private int _generiekId;
		
		private int _formulariumId;
		
		private int _tekstItemId;
		
		private EntityRef<Formularium> _Formularium;
		
		private EntityRef<TekstItem> _TekstItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngeneriekBijzonderheidIdChanging(int value);
    partial void OngeneriekBijzonderheidIdChanged();
    partial void OngeneriekIdChanging(int value);
    partial void OngeneriekIdChanged();
    partial void OnformulariumIdChanging(int value);
    partial void OnformulariumIdChanged();
    partial void OntekstItemIdChanging(int value);
    partial void OntekstItemIdChanged();
    #endregion
		
		public GeneriekBijzonderheid()
		{
			this._Formularium = default(EntityRef<Formularium>);
			this._TekstItem = default(EntityRef<TekstItem>);
			OnCreated();
		}
		
		[Column(Storage="_generiekBijzonderheidId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int generiekBijzonderheidId
		{
			get
			{
				return this._generiekBijzonderheidId;
			}
			set
			{
				if ((this._generiekBijzonderheidId != value))
				{
					this.OngeneriekBijzonderheidIdChanging(value);
					this.SendPropertyChanging();
					this._generiekBijzonderheidId = value;
					this.SendPropertyChanged("generiekBijzonderheidId");
					this.OngeneriekBijzonderheidIdChanged();
				}
			}
		}
		
		[Column(Storage="_generiekId", DbType="Int NOT NULL")]
		public int generiekId
		{
			get
			{
				return this._generiekId;
			}
			set
			{
				if ((this._generiekId != value))
				{
					this.OngeneriekIdChanging(value);
					this.SendPropertyChanging();
					this._generiekId = value;
					this.SendPropertyChanged("generiekId");
					this.OngeneriekIdChanged();
				}
			}
		}
		
		[Column(Storage="_formulariumId", DbType="Int NOT NULL")]
		public int formulariumId
		{
			get
			{
				return this._formulariumId;
			}
			set
			{
				if ((this._formulariumId != value))
				{
					if (this._Formularium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnformulariumIdChanging(value);
					this.SendPropertyChanging();
					this._formulariumId = value;
					this.SendPropertyChanged("formulariumId");
					this.OnformulariumIdChanged();
				}
			}
		}
		
		[Column(Storage="_tekstItemId", DbType="Int NOT NULL")]
		public int tekstItemId
		{
			get
			{
				return this._tekstItemId;
			}
			set
			{
				if ((this._tekstItemId != value))
				{
					if (this._TekstItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntekstItemIdChanging(value);
					this.SendPropertyChanging();
					this._tekstItemId = value;
					this.SendPropertyChanged("tekstItemId");
					this.OntekstItemIdChanged();
				}
			}
		}
		
		[Association(Name="Formularium_GeneriekBijzonderheid", Storage="_Formularium", ThisKey="formulariumId", OtherKey="formulariumId", IsForeignKey=true)]
		public Formularium Formularium
		{
			get
			{
				return this._Formularium.Entity;
			}
			set
			{
				Formularium previousValue = this._Formularium.Entity;
				if (((previousValue != value) 
							|| (this._Formularium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formularium.Entity = null;
						previousValue.GeneriekBijzonderheids.Remove(this);
					}
					this._Formularium.Entity = value;
					if ((value != null))
					{
						value.GeneriekBijzonderheids.Add(this);
						this._formulariumId = value.formulariumId;
					}
					else
					{
						this._formulariumId = default(int);
					}
					this.SendPropertyChanged("Formularium");
				}
			}
		}
		
		[Association(Name="TekstItem_GeneriekBijzonderheid", Storage="_TekstItem", ThisKey="tekstItemId", OtherKey="tekstItemId", IsForeignKey=true)]
		public TekstItem TekstItem
		{
			get
			{
				return this._TekstItem.Entity;
			}
			set
			{
				TekstItem previousValue = this._TekstItem.Entity;
				if (((previousValue != value) 
							|| (this._TekstItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TekstItem.Entity = null;
						previousValue.GeneriekBijzonderheids.Remove(this);
					}
					this._TekstItem.Entity = value;
					if ((value != null))
					{
						value.GeneriekBijzonderheids.Add(this);
						this._tekstItemId = value.tekstItemId;
					}
					else
					{
						this._tekstItemId = default(int);
					}
					this.SendPropertyChanged("TekstItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.GeneriekDosering")]
	public partial class GeneriekDosering : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _generiekDoseringId;
		
		private System.Data.Linq.Binary _versieTimeStamp;
		
		private int _tekstItemId;
		
		private int _generiekId;
		
		private System.Nullable<int> _formulariumId;
		
		private EntitySet<DoseringArtikel> _DoseringArtikels;
		
		private EntitySet<DoseringRoute> _DoseringRoutes;
		
		private EntitySet<DoseringToepassing> _DoseringToepassings;
		
		private EntityRef<Formularium> _Formularium;
		
		private EntityRef<TekstItem> _TekstItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngeneriekDoseringIdChanging(int value);
    partial void OngeneriekDoseringIdChanged();
    partial void OnversieTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnversieTimeStampChanged();
    partial void OntekstItemIdChanging(int value);
    partial void OntekstItemIdChanged();
    partial void OngeneriekIdChanging(int value);
    partial void OngeneriekIdChanged();
    partial void OnformulariumIdChanging(System.Nullable<int> value);
    partial void OnformulariumIdChanged();
    #endregion
		
		public GeneriekDosering()
		{
			this._DoseringArtikels = new EntitySet<DoseringArtikel>(new Action<DoseringArtikel>(this.attach_DoseringArtikels), new Action<DoseringArtikel>(this.detach_DoseringArtikels));
			this._DoseringRoutes = new EntitySet<DoseringRoute>(new Action<DoseringRoute>(this.attach_DoseringRoutes), new Action<DoseringRoute>(this.detach_DoseringRoutes));
			this._DoseringToepassings = new EntitySet<DoseringToepassing>(new Action<DoseringToepassing>(this.attach_DoseringToepassings), new Action<DoseringToepassing>(this.detach_DoseringToepassings));
			this._Formularium = default(EntityRef<Formularium>);
			this._TekstItem = default(EntityRef<TekstItem>);
			OnCreated();
		}
		
		[Column(Storage="_generiekDoseringId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int generiekDoseringId
		{
			get
			{
				return this._generiekDoseringId;
			}
			set
			{
				if ((this._generiekDoseringId != value))
				{
					this.OngeneriekDoseringIdChanging(value);
					this.SendPropertyChanging();
					this._generiekDoseringId = value;
					this.SendPropertyChanged("generiekDoseringId");
					this.OngeneriekDoseringIdChanged();
				}
			}
		}
		
		[Column(Storage="_versieTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary versieTimeStamp
		{
			get
			{
				return this._versieTimeStamp;
			}
			set
			{
				if ((this._versieTimeStamp != value))
				{
					this.OnversieTimeStampChanging(value);
					this.SendPropertyChanging();
					this._versieTimeStamp = value;
					this.SendPropertyChanged("versieTimeStamp");
					this.OnversieTimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_tekstItemId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int tekstItemId
		{
			get
			{
				return this._tekstItemId;
			}
			set
			{
				if ((this._tekstItemId != value))
				{
					if (this._TekstItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntekstItemIdChanging(value);
					this.SendPropertyChanging();
					this._tekstItemId = value;
					this.SendPropertyChanged("tekstItemId");
					this.OntekstItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_generiekId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int generiekId
		{
			get
			{
				return this._generiekId;
			}
			set
			{
				if ((this._generiekId != value))
				{
					this.OngeneriekIdChanging(value);
					this.SendPropertyChanging();
					this._generiekId = value;
					this.SendPropertyChanged("generiekId");
					this.OngeneriekIdChanged();
				}
			}
		}
		
		[Column(Storage="_formulariumId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> formulariumId
		{
			get
			{
				return this._formulariumId;
			}
			set
			{
				if ((this._formulariumId != value))
				{
					if (this._Formularium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnformulariumIdChanging(value);
					this.SendPropertyChanging();
					this._formulariumId = value;
					this.SendPropertyChanged("formulariumId");
					this.OnformulariumIdChanged();
				}
			}
		}
		
		[Association(Name="GeneriekDosering_DoseringArtikel", Storage="_DoseringArtikels", ThisKey="generiekDoseringId", OtherKey="generiekDoseringId")]
		public EntitySet<DoseringArtikel> DoseringArtikels
		{
			get
			{
				return this._DoseringArtikels;
			}
			set
			{
				this._DoseringArtikels.Assign(value);
			}
		}
		
		[Association(Name="GeneriekDosering_DoseringRoute", Storage="_DoseringRoutes", ThisKey="generiekDoseringId", OtherKey="generiekDoseringId")]
		public EntitySet<DoseringRoute> DoseringRoutes
		{
			get
			{
				return this._DoseringRoutes;
			}
			set
			{
				this._DoseringRoutes.Assign(value);
			}
		}
		
		[Association(Name="GeneriekDosering_DoseringToepassing", Storage="_DoseringToepassings", ThisKey="generiekDoseringId", OtherKey="generiekDoseringId")]
		public EntitySet<DoseringToepassing> DoseringToepassings
		{
			get
			{
				return this._DoseringToepassings;
			}
			set
			{
				this._DoseringToepassings.Assign(value);
			}
		}
		
		[Association(Name="Formularium_GeneriekDosering", Storage="_Formularium", ThisKey="formulariumId", OtherKey="formulariumId", IsForeignKey=true)]
		public Formularium Formularium
		{
			get
			{
				return this._Formularium.Entity;
			}
			set
			{
				Formularium previousValue = this._Formularium.Entity;
				if (((previousValue != value) 
							|| (this._Formularium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formularium.Entity = null;
						previousValue.GeneriekDoserings.Remove(this);
					}
					this._Formularium.Entity = value;
					if ((value != null))
					{
						value.GeneriekDoserings.Add(this);
						this._formulariumId = value.formulariumId;
					}
					else
					{
						this._formulariumId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Formularium");
				}
			}
		}
		
		[Association(Name="TekstItem_GeneriekDosering", Storage="_TekstItem", ThisKey="tekstItemId", OtherKey="tekstItemId", IsForeignKey=true)]
		public TekstItem TekstItem
		{
			get
			{
				return this._TekstItem.Entity;
			}
			set
			{
				TekstItem previousValue = this._TekstItem.Entity;
				if (((previousValue != value) 
							|| (this._TekstItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TekstItem.Entity = null;
						previousValue.GeneriekDoserings.Remove(this);
					}
					this._TekstItem.Entity = value;
					if ((value != null))
					{
						value.GeneriekDoserings.Add(this);
						this._tekstItemId = value.tekstItemId;
					}
					else
					{
						this._tekstItemId = default(int);
					}
					this.SendPropertyChanged("TekstItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DoseringArtikels(DoseringArtikel entity)
		{
			this.SendPropertyChanging();
			entity.GeneriekDosering = this;
		}
		
		private void detach_DoseringArtikels(DoseringArtikel entity)
		{
			this.SendPropertyChanging();
			entity.GeneriekDosering = null;
		}
		
		private void attach_DoseringRoutes(DoseringRoute entity)
		{
			this.SendPropertyChanging();
			entity.GeneriekDosering = this;
		}
		
		private void detach_DoseringRoutes(DoseringRoute entity)
		{
			this.SendPropertyChanging();
			entity.GeneriekDosering = null;
		}
		
		private void attach_DoseringToepassings(DoseringToepassing entity)
		{
			this.SendPropertyChanging();
			entity.GeneriekDosering = this;
		}
		
		private void detach_DoseringToepassings(DoseringToepassing entity)
		{
			this.SendPropertyChanging();
			entity.GeneriekDosering = null;
		}
	}
	
	[Table(Name="dbo.DoseringArtikel")]
	public partial class DoseringArtikel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _doseringArtikelId;
		
		private int _generiekDoseringId;
		
		private int _artikelId;
		
		private EntityRef<GeneriekDosering> _GeneriekDosering;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndoseringArtikelIdChanging(int value);
    partial void OndoseringArtikelIdChanged();
    partial void OngeneriekDoseringIdChanging(int value);
    partial void OngeneriekDoseringIdChanged();
    partial void OnartikelIdChanging(int value);
    partial void OnartikelIdChanged();
    #endregion
		
		public DoseringArtikel()
		{
			this._GeneriekDosering = default(EntityRef<GeneriekDosering>);
			OnCreated();
		}
		
		[Column(Storage="_doseringArtikelId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int doseringArtikelId
		{
			get
			{
				return this._doseringArtikelId;
			}
			set
			{
				if ((this._doseringArtikelId != value))
				{
					this.OndoseringArtikelIdChanging(value);
					this.SendPropertyChanging();
					this._doseringArtikelId = value;
					this.SendPropertyChanged("doseringArtikelId");
					this.OndoseringArtikelIdChanged();
				}
			}
		}
		
		[Column(Storage="_generiekDoseringId", DbType="Int NOT NULL")]
		public int generiekDoseringId
		{
			get
			{
				return this._generiekDoseringId;
			}
			set
			{
				if ((this._generiekDoseringId != value))
				{
					if (this._GeneriekDosering.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngeneriekDoseringIdChanging(value);
					this.SendPropertyChanging();
					this._generiekDoseringId = value;
					this.SendPropertyChanged("generiekDoseringId");
					this.OngeneriekDoseringIdChanged();
				}
			}
		}
		
		[Column(Storage="_artikelId", DbType="Int NOT NULL")]
		public int artikelId
		{
			get
			{
				return this._artikelId;
			}
			set
			{
				if ((this._artikelId != value))
				{
					this.OnartikelIdChanging(value);
					this.SendPropertyChanging();
					this._artikelId = value;
					this.SendPropertyChanged("artikelId");
					this.OnartikelIdChanged();
				}
			}
		}
		
		[Association(Name="GeneriekDosering_DoseringArtikel", Storage="_GeneriekDosering", ThisKey="generiekDoseringId", OtherKey="generiekDoseringId", IsForeignKey=true)]
		public GeneriekDosering GeneriekDosering
		{
			get
			{
				return this._GeneriekDosering.Entity;
			}
			set
			{
				GeneriekDosering previousValue = this._GeneriekDosering.Entity;
				if (((previousValue != value) 
							|| (this._GeneriekDosering.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneriekDosering.Entity = null;
						previousValue.DoseringArtikels.Remove(this);
					}
					this._GeneriekDosering.Entity = value;
					if ((value != null))
					{
						value.DoseringArtikels.Add(this);
						this._generiekDoseringId = value.generiekDoseringId;
					}
					else
					{
						this._generiekDoseringId = default(int);
					}
					this.SendPropertyChanged("GeneriekDosering");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DoseringRoute")]
	public partial class DoseringRoute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _doseringRouteId;
		
		private int _generiekDoseringId;
		
		private int _routeId;
		
		private EntityRef<GeneriekDosering> _GeneriekDosering;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndoseringRouteIdChanging(int value);
    partial void OndoseringRouteIdChanged();
    partial void OngeneriekDoseringIdChanging(int value);
    partial void OngeneriekDoseringIdChanged();
    partial void OnrouteIdChanging(int value);
    partial void OnrouteIdChanged();
    #endregion
		
		public DoseringRoute()
		{
			this._GeneriekDosering = default(EntityRef<GeneriekDosering>);
			OnCreated();
		}
		
		[Column(Storage="_doseringRouteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int doseringRouteId
		{
			get
			{
				return this._doseringRouteId;
			}
			set
			{
				if ((this._doseringRouteId != value))
				{
					this.OndoseringRouteIdChanging(value);
					this.SendPropertyChanging();
					this._doseringRouteId = value;
					this.SendPropertyChanged("doseringRouteId");
					this.OndoseringRouteIdChanged();
				}
			}
		}
		
		[Column(Storage="_generiekDoseringId", DbType="Int NOT NULL")]
		public int generiekDoseringId
		{
			get
			{
				return this._generiekDoseringId;
			}
			set
			{
				if ((this._generiekDoseringId != value))
				{
					if (this._GeneriekDosering.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngeneriekDoseringIdChanging(value);
					this.SendPropertyChanging();
					this._generiekDoseringId = value;
					this.SendPropertyChanged("generiekDoseringId");
					this.OngeneriekDoseringIdChanged();
				}
			}
		}
		
		[Column(Storage="_routeId", DbType="Int NOT NULL")]
		public int routeId
		{
			get
			{
				return this._routeId;
			}
			set
			{
				if ((this._routeId != value))
				{
					this.OnrouteIdChanging(value);
					this.SendPropertyChanging();
					this._routeId = value;
					this.SendPropertyChanged("routeId");
					this.OnrouteIdChanged();
				}
			}
		}
		
		[Association(Name="GeneriekDosering_DoseringRoute", Storage="_GeneriekDosering", ThisKey="generiekDoseringId", OtherKey="generiekDoseringId", IsForeignKey=true)]
		public GeneriekDosering GeneriekDosering
		{
			get
			{
				return this._GeneriekDosering.Entity;
			}
			set
			{
				GeneriekDosering previousValue = this._GeneriekDosering.Entity;
				if (((previousValue != value) 
							|| (this._GeneriekDosering.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneriekDosering.Entity = null;
						previousValue.DoseringRoutes.Remove(this);
					}
					this._GeneriekDosering.Entity = value;
					if ((value != null))
					{
						value.DoseringRoutes.Add(this);
						this._generiekDoseringId = value.generiekDoseringId;
					}
					else
					{
						this._generiekDoseringId = default(int);
					}
					this.SendPropertyChanged("GeneriekDosering");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DoseringToepassing")]
	public partial class DoseringToepassing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _doseringToepassingId;
		
		private int _generiekDoseringId;
		
		private int _toepassingGroepId;
		
		private EntityRef<GeneriekDosering> _GeneriekDosering;
		
		private EntityRef<ToepassingGroep> _ToepassingGroep;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndoseringToepassingIdChanging(int value);
    partial void OndoseringToepassingIdChanged();
    partial void OngeneriekDoseringIdChanging(int value);
    partial void OngeneriekDoseringIdChanged();
    partial void OntoepassingGroepIdChanging(int value);
    partial void OntoepassingGroepIdChanged();
    #endregion
		
		public DoseringToepassing()
		{
			this._GeneriekDosering = default(EntityRef<GeneriekDosering>);
			this._ToepassingGroep = default(EntityRef<ToepassingGroep>);
			OnCreated();
		}
		
		[Column(Storage="_doseringToepassingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int doseringToepassingId
		{
			get
			{
				return this._doseringToepassingId;
			}
			set
			{
				if ((this._doseringToepassingId != value))
				{
					this.OndoseringToepassingIdChanging(value);
					this.SendPropertyChanging();
					this._doseringToepassingId = value;
					this.SendPropertyChanged("doseringToepassingId");
					this.OndoseringToepassingIdChanged();
				}
			}
		}
		
		[Column(Storage="_generiekDoseringId", DbType="Int NOT NULL")]
		public int generiekDoseringId
		{
			get
			{
				return this._generiekDoseringId;
			}
			set
			{
				if ((this._generiekDoseringId != value))
				{
					if (this._GeneriekDosering.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngeneriekDoseringIdChanging(value);
					this.SendPropertyChanging();
					this._generiekDoseringId = value;
					this.SendPropertyChanged("generiekDoseringId");
					this.OngeneriekDoseringIdChanged();
				}
			}
		}
		
		[Column(Storage="_toepassingGroepId", DbType="Int NOT NULL")]
		public int toepassingGroepId
		{
			get
			{
				return this._toepassingGroepId;
			}
			set
			{
				if ((this._toepassingGroepId != value))
				{
					if (this._ToepassingGroep.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntoepassingGroepIdChanging(value);
					this.SendPropertyChanging();
					this._toepassingGroepId = value;
					this.SendPropertyChanged("toepassingGroepId");
					this.OntoepassingGroepIdChanged();
				}
			}
		}
		
		[Association(Name="GeneriekDosering_DoseringToepassing", Storage="_GeneriekDosering", ThisKey="generiekDoseringId", OtherKey="generiekDoseringId", IsForeignKey=true)]
		public GeneriekDosering GeneriekDosering
		{
			get
			{
				return this._GeneriekDosering.Entity;
			}
			set
			{
				GeneriekDosering previousValue = this._GeneriekDosering.Entity;
				if (((previousValue != value) 
							|| (this._GeneriekDosering.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneriekDosering.Entity = null;
						previousValue.DoseringToepassings.Remove(this);
					}
					this._GeneriekDosering.Entity = value;
					if ((value != null))
					{
						value.DoseringToepassings.Add(this);
						this._generiekDoseringId = value.generiekDoseringId;
					}
					else
					{
						this._generiekDoseringId = default(int);
					}
					this.SendPropertyChanged("GeneriekDosering");
				}
			}
		}
		
		[Association(Name="ToepassingGroep_DoseringToepassing", Storage="_ToepassingGroep", ThisKey="toepassingGroepId", OtherKey="toepassingGroepId", IsForeignKey=true)]
		public ToepassingGroep ToepassingGroep
		{
			get
			{
				return this._ToepassingGroep.Entity;
			}
			set
			{
				ToepassingGroep previousValue = this._ToepassingGroep.Entity;
				if (((previousValue != value) 
							|| (this._ToepassingGroep.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToepassingGroep.Entity = null;
						previousValue.DoseringToepassings.Remove(this);
					}
					this._ToepassingGroep.Entity = value;
					if ((value != null))
					{
						value.DoseringToepassings.Add(this);
						this._toepassingGroepId = value.toepassingGroepId;
					}
					else
					{
						this._toepassingGroepId = default(int);
					}
					this.SendPropertyChanged("ToepassingGroep");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TekstItem")]
	public partial class TekstItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _tekstItemId;
		
		private System.Data.Linq.Binary _versieTimeStamp;
		
		private string _tekst;
		
		private string _tekstType;
		
		private string _tekstStatus;
		
		private string _tekstKop;
		
		private EntitySet<FormulariumTekst> _FormulariumTeksts;
		
		private EntitySet<ToepassingBijzonderheid> _ToepassingBijzonderheids;
		
		private EntitySet<ArtikelBijzonderheid> _ArtikelBijzonderheids;
		
		private EntitySet<GeneriekBijzonderheid> _GeneriekBijzonderheids;
		
		private EntitySet<GeneriekDosering> _GeneriekDoserings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntekstItemIdChanging(int value);
    partial void OntekstItemIdChanged();
    partial void OnversieTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnversieTimeStampChanged();
    partial void OntekstChanging(string value);
    partial void OntekstChanged();
    partial void OntekstTypeChanging(string value);
    partial void OntekstTypeChanged();
    partial void OntekstStatusChanging(string value);
    partial void OntekstStatusChanged();
    partial void OntekstKopChanging(string value);
    partial void OntekstKopChanged();
    #endregion
		
		public TekstItem()
		{
			this._FormulariumTeksts = new EntitySet<FormulariumTekst>(new Action<FormulariumTekst>(this.attach_FormulariumTeksts), new Action<FormulariumTekst>(this.detach_FormulariumTeksts));
			this._ToepassingBijzonderheids = new EntitySet<ToepassingBijzonderheid>(new Action<ToepassingBijzonderheid>(this.attach_ToepassingBijzonderheids), new Action<ToepassingBijzonderheid>(this.detach_ToepassingBijzonderheids));
			this._ArtikelBijzonderheids = new EntitySet<ArtikelBijzonderheid>(new Action<ArtikelBijzonderheid>(this.attach_ArtikelBijzonderheids), new Action<ArtikelBijzonderheid>(this.detach_ArtikelBijzonderheids));
			this._GeneriekBijzonderheids = new EntitySet<GeneriekBijzonderheid>(new Action<GeneriekBijzonderheid>(this.attach_GeneriekBijzonderheids), new Action<GeneriekBijzonderheid>(this.detach_GeneriekBijzonderheids));
			this._GeneriekDoserings = new EntitySet<GeneriekDosering>(new Action<GeneriekDosering>(this.attach_GeneriekDoserings), new Action<GeneriekDosering>(this.detach_GeneriekDoserings));
			OnCreated();
		}
		
		[Column(Storage="_tekstItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int tekstItemId
		{
			get
			{
				return this._tekstItemId;
			}
			set
			{
				if ((this._tekstItemId != value))
				{
					this.OntekstItemIdChanging(value);
					this.SendPropertyChanging();
					this._tekstItemId = value;
					this.SendPropertyChanged("tekstItemId");
					this.OntekstItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_versieTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary versieTimeStamp
		{
			get
			{
				return this._versieTimeStamp;
			}
			set
			{
				if ((this._versieTimeStamp != value))
				{
					this.OnversieTimeStampChanging(value);
					this.SendPropertyChanging();
					this._versieTimeStamp = value;
					this.SendPropertyChanged("versieTimeStamp");
					this.OnversieTimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_tekst", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string tekst
		{
			get
			{
				return this._tekst;
			}
			set
			{
				if ((this._tekst != value))
				{
					this.OntekstChanging(value);
					this.SendPropertyChanging();
					this._tekst = value;
					this.SendPropertyChanged("tekst");
					this.OntekstChanged();
				}
			}
		}
		
		[Column(Storage="_tekstType", DbType="NChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string tekstType
		{
			get
			{
				return this._tekstType;
			}
			set
			{
				if ((this._tekstType != value))
				{
					this.OntekstTypeChanging(value);
					this.SendPropertyChanging();
					this._tekstType = value;
					this.SendPropertyChanged("tekstType");
					this.OntekstTypeChanged();
				}
			}
		}
		
		[Column(Storage="_tekstStatus", DbType="NChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string tekstStatus
		{
			get
			{
				return this._tekstStatus;
			}
			set
			{
				if ((this._tekstStatus != value))
				{
					this.OntekstStatusChanging(value);
					this.SendPropertyChanging();
					this._tekstStatus = value;
					this.SendPropertyChanged("tekstStatus");
					this.OntekstStatusChanged();
				}
			}
		}
		
		[Column(Storage="_tekstKop", DbType="NChar(125)", UpdateCheck=UpdateCheck.Never)]
		public string tekstKop
		{
			get
			{
				return this._tekstKop;
			}
			set
			{
				if ((this._tekstKop != value))
				{
					this.OntekstKopChanging(value);
					this.SendPropertyChanging();
					this._tekstKop = value;
					this.SendPropertyChanged("tekstKop");
					this.OntekstKopChanged();
				}
			}
		}
		
		[Association(Name="TekstItem_FormulariumTekst", Storage="_FormulariumTeksts", ThisKey="tekstItemId", OtherKey="tekstItemId")]
		public EntitySet<FormulariumTekst> FormulariumTeksts
		{
			get
			{
				return this._FormulariumTeksts;
			}
			set
			{
				this._FormulariumTeksts.Assign(value);
			}
		}
		
		[Association(Name="TekstItem_ToepassingBijzonderheid", Storage="_ToepassingBijzonderheids", ThisKey="tekstItemId", OtherKey="tekstItemId")]
		public EntitySet<ToepassingBijzonderheid> ToepassingBijzonderheids
		{
			get
			{
				return this._ToepassingBijzonderheids;
			}
			set
			{
				this._ToepassingBijzonderheids.Assign(value);
			}
		}
		
		[Association(Name="TekstItem_ArtikelBijzonderheid", Storage="_ArtikelBijzonderheids", ThisKey="tekstItemId", OtherKey="tekstItemId")]
		public EntitySet<ArtikelBijzonderheid> ArtikelBijzonderheids
		{
			get
			{
				return this._ArtikelBijzonderheids;
			}
			set
			{
				this._ArtikelBijzonderheids.Assign(value);
			}
		}
		
		[Association(Name="TekstItem_GeneriekBijzonderheid", Storage="_GeneriekBijzonderheids", ThisKey="tekstItemId", OtherKey="tekstItemId")]
		public EntitySet<GeneriekBijzonderheid> GeneriekBijzonderheids
		{
			get
			{
				return this._GeneriekBijzonderheids;
			}
			set
			{
				this._GeneriekBijzonderheids.Assign(value);
			}
		}
		
		[Association(Name="TekstItem_GeneriekDosering", Storage="_GeneriekDoserings", ThisKey="tekstItemId", OtherKey="tekstItemId")]
		public EntitySet<GeneriekDosering> GeneriekDoserings
		{
			get
			{
				return this._GeneriekDoserings;
			}
			set
			{
				this._GeneriekDoserings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FormulariumTeksts(FormulariumTekst entity)
		{
			this.SendPropertyChanging();
			entity.TekstItem = this;
		}
		
		private void detach_FormulariumTeksts(FormulariumTekst entity)
		{
			this.SendPropertyChanging();
			entity.TekstItem = null;
		}
		
		private void attach_ToepassingBijzonderheids(ToepassingBijzonderheid entity)
		{
			this.SendPropertyChanging();
			entity.TekstItem = this;
		}
		
		private void detach_ToepassingBijzonderheids(ToepassingBijzonderheid entity)
		{
			this.SendPropertyChanging();
			entity.TekstItem = null;
		}
		
		private void attach_ArtikelBijzonderheids(ArtikelBijzonderheid entity)
		{
			this.SendPropertyChanging();
			entity.TekstItem = this;
		}
		
		private void detach_ArtikelBijzonderheids(ArtikelBijzonderheid entity)
		{
			this.SendPropertyChanging();
			entity.TekstItem = null;
		}
		
		private void attach_GeneriekBijzonderheids(GeneriekBijzonderheid entity)
		{
			this.SendPropertyChanging();
			entity.TekstItem = this;
		}
		
		private void detach_GeneriekBijzonderheids(GeneriekBijzonderheid entity)
		{
			this.SendPropertyChanging();
			entity.TekstItem = null;
		}
		
		private void attach_GeneriekDoserings(GeneriekDosering entity)
		{
			this.SendPropertyChanging();
			entity.TekstItem = this;
		}
		
		private void detach_GeneriekDoserings(GeneriekDosering entity)
		{
			this.SendPropertyChanging();
			entity.TekstItem = null;
		}
	}
}
#pragma warning restore 1591
