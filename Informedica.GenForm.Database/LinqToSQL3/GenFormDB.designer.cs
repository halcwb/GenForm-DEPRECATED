#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Informedica.GenForm.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="GenForm")]
	public partial class GenFormDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBrand(Brand instance);
    partial void UpdateBrand(Brand instance);
    partial void DeleteBrand(Brand instance);
    partial void InsertChapter(Chapter instance);
    partial void UpdateChapter(Chapter instance);
    partial void DeleteChapter(Chapter instance);
    partial void InsertDosingAdviceChapter(DosingAdviceChapter instance);
    partial void UpdateDosingAdviceChapter(DosingAdviceChapter instance);
    partial void DeleteDosingAdviceChapter(DosingAdviceChapter instance);
    partial void InsertDosingAdviceProduct(DosingAdviceProduct instance);
    partial void UpdateDosingAdviceProduct(DosingAdviceProduct instance);
    partial void DeleteDosingAdviceProduct(DosingAdviceProduct instance);
    partial void InsertDosingAdviceRoute(DosingAdviceRoute instance);
    partial void UpdateDosingAdviceRoute(DosingAdviceRoute instance);
    partial void DeleteDosingAdviceRoute(DosingAdviceRoute instance);
    partial void InsertFormularium(Formularium instance);
    partial void UpdateFormularium(Formularium instance);
    partial void DeleteFormularium(Formularium instance);
    partial void InsertFormulariumChapter(FormulariumChapter instance);
    partial void UpdateFormulariumChapter(FormulariumChapter instance);
    partial void DeleteFormulariumChapter(FormulariumChapter instance);
    partial void InsertFormulariumChapterText(FormulariumChapterText instance);
    partial void UpdateFormulariumChapterText(FormulariumChapterText instance);
    partial void DeleteFormulariumChapterText(FormulariumChapterText instance);
    partial void InsertFormulariumPharmacist(FormulariumPharmacist instance);
    partial void UpdateFormulariumPharmacist(FormulariumPharmacist instance);
    partial void DeleteFormulariumPharmacist(FormulariumPharmacist instance);
    partial void InsertFormulariumSubstanceText(FormulariumSubstanceText instance);
    partial void UpdateFormulariumSubstanceText(FormulariumSubstanceText instance);
    partial void DeleteFormulariumSubstanceText(FormulariumSubstanceText instance);
    partial void InsertFormulariumText(FormulariumText instance);
    partial void UpdateFormulariumText(FormulariumText instance);
    partial void DeleteFormulariumText(FormulariumText instance);
    partial void InsertGenFormUser(GenFormUser instance);
    partial void UpdateGenFormUser(GenFormUser instance);
    partial void DeleteGenFormUser(GenFormUser instance);
    partial void InsertIndication(Indication instance);
    partial void UpdateIndication(Indication instance);
    partial void DeleteIndication(Indication instance);
    partial void InsertPackage(Package instance);
    partial void UpdatePackage(Package instance);
    partial void DeletePackage(Package instance);
    partial void InsertPharmacist(Pharmacist instance);
    partial void UpdatePharmacist(Pharmacist instance);
    partial void DeletePharmacist(Pharmacist instance);
    partial void InsertPharmacy(Pharmacy instance);
    partial void UpdatePharmacy(Pharmacy instance);
    partial void DeletePharmacy(Pharmacy instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProductCombination(ProductCombination instance);
    partial void UpdateProductCombination(ProductCombination instance);
    partial void DeleteProductCombination(ProductCombination instance);
    partial void InsertProductFormulariumText(ProductFormulariumText instance);
    partial void UpdateProductFormulariumText(ProductFormulariumText instance);
    partial void DeleteProductFormulariumText(ProductFormulariumText instance);
    partial void InsertProductRoute(ProductRoute instance);
    partial void UpdateProductRoute(ProductRoute instance);
    partial void DeleteProductRoute(ProductRoute instance);
    partial void InsertProductSubstance(ProductSubstance instance);
    partial void UpdateProductSubstance(ProductSubstance instance);
    partial void DeleteProductSubstance(ProductSubstance instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRoute(Route instance);
    partial void UpdateRoute(Route instance);
    partial void DeleteRoute(Route instance);
    partial void InsertShape(Shape instance);
    partial void UpdateShape(Shape instance);
    partial void DeleteShape(Shape instance);
    partial void InsertShapePackage(ShapePackage instance);
    partial void UpdateShapePackage(ShapePackage instance);
    partial void DeleteShapePackage(ShapePackage instance);
    partial void InsertShapeRoute(ShapeRoute instance);
    partial void UpdateShapeRoute(ShapeRoute instance);
    partial void DeleteShapeRoute(ShapeRoute instance);
    partial void InsertShapeUnit(ShapeUnit instance);
    partial void UpdateShapeUnit(ShapeUnit instance);
    partial void DeleteShapeUnit(ShapeUnit instance);
    partial void InsertSubstance(Substance instance);
    partial void UpdateSubstance(Substance instance);
    partial void DeleteSubstance(Substance instance);
    partial void InsertSubstanceDosingAdvice(SubstanceDosingAdvice instance);
    partial void UpdateSubstanceDosingAdvice(SubstanceDosingAdvice instance);
    partial void DeleteSubstanceDosingAdvice(SubstanceDosingAdvice instance);
    partial void InsertSubstanceGroup(SubstanceGroup instance);
    partial void UpdateSubstanceGroup(SubstanceGroup instance);
    partial void DeleteSubstanceGroup(SubstanceGroup instance);
    partial void InsertTextItem(TextItem instance);
    partial void UpdateTextItem(TextItem instance);
    partial void DeleteTextItem(TextItem instance);
    partial void InsertTextLog(TextLog instance);
    partial void UpdateTextLog(TextLog instance);
    partial void DeleteTextLog(TextLog instance);
    partial void InsertUnit(Unit instance);
    partial void UpdateUnit(Unit instance);
    partial void DeleteUnit(Unit instance);
    partial void InsertUnitGroup(UnitGroup instance);
    partial void UpdateUnitGroup(UnitGroup instance);
    partial void DeleteUnitGroup(UnitGroup instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    #endregion
		
		public GenFormDataContext() : 
				base(global::Informedica.GenForm.Database.ORM.Properties.Settings.Default.GenFormConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GenFormDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GenFormDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GenFormDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GenFormDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Brand> Brand
		{
			get
			{
				return this.GetTable<Brand>();
			}
		}
		
		public System.Data.Linq.Table<Chapter> Chapter
		{
			get
			{
				return this.GetTable<Chapter>();
			}
		}
		
		public System.Data.Linq.Table<DosingAdviceChapter> DosingAdviceChapter
		{
			get
			{
				return this.GetTable<DosingAdviceChapter>();
			}
		}
		
		public System.Data.Linq.Table<DosingAdviceProduct> DosingAdviceProduct
		{
			get
			{
				return this.GetTable<DosingAdviceProduct>();
			}
		}
		
		public System.Data.Linq.Table<DosingAdviceRoute> DosingAdviceRoute
		{
			get
			{
				return this.GetTable<DosingAdviceRoute>();
			}
		}
		
		public System.Data.Linq.Table<Formularium> Formularium
		{
			get
			{
				return this.GetTable<Formularium>();
			}
		}
		
		public System.Data.Linq.Table<FormulariumChapter> FormulariumChapter
		{
			get
			{
				return this.GetTable<FormulariumChapter>();
			}
		}
		
		public System.Data.Linq.Table<FormulariumChapterText> FormulariumChapterText
		{
			get
			{
				return this.GetTable<FormulariumChapterText>();
			}
		}
		
		public System.Data.Linq.Table<FormulariumPharmacist> FormulariumPharmacist
		{
			get
			{
				return this.GetTable<FormulariumPharmacist>();
			}
		}
		
		public System.Data.Linq.Table<FormulariumSubstanceText> FormulariumSubstanceText
		{
			get
			{
				return this.GetTable<FormulariumSubstanceText>();
			}
		}
		
		public System.Data.Linq.Table<FormulariumText> FormulariumText
		{
			get
			{
				return this.GetTable<FormulariumText>();
			}
		}
		
		public System.Data.Linq.Table<GenFormUser> GenFormUser
		{
			get
			{
				return this.GetTable<GenFormUser>();
			}
		}
		
		public System.Data.Linq.Table<Indication> Indication
		{
			get
			{
				return this.GetTable<Indication>();
			}
		}
		
		public System.Data.Linq.Table<Package> Package
		{
			get
			{
				return this.GetTable<Package>();
			}
		}
		
		public System.Data.Linq.Table<Pharmacist> Pharmacist
		{
			get
			{
				return this.GetTable<Pharmacist>();
			}
		}
		
		public System.Data.Linq.Table<Pharmacy> Pharmacy
		{
			get
			{
				return this.GetTable<Pharmacy>();
			}
		}
		
		public System.Data.Linq.Table<Product> Product
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ProductCombination> ProductCombination
		{
			get
			{
				return this.GetTable<ProductCombination>();
			}
		}
		
		public System.Data.Linq.Table<ProductFormulariumText> ProductFormulariumText
		{
			get
			{
				return this.GetTable<ProductFormulariumText>();
			}
		}
		
		public System.Data.Linq.Table<ProductRoute> ProductRoute
		{
			get
			{
				return this.GetTable<ProductRoute>();
			}
		}
		
		public System.Data.Linq.Table<ProductSubstance> ProductSubstance
		{
			get
			{
				return this.GetTable<ProductSubstance>();
			}
		}
		
		public System.Data.Linq.Table<Role> Role
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Route> Route
		{
			get
			{
				return this.GetTable<Route>();
			}
		}
		
		public System.Data.Linq.Table<Shape> Shape
		{
			get
			{
				return this.GetTable<Shape>();
			}
		}
		
		public System.Data.Linq.Table<ShapePackage> ShapePackage
		{
			get
			{
				return this.GetTable<ShapePackage>();
			}
		}
		
		public System.Data.Linq.Table<ShapeRoute> ShapeRoute
		{
			get
			{
				return this.GetTable<ShapeRoute>();
			}
		}
		
		public System.Data.Linq.Table<ShapeUnit> ShapeUnit
		{
			get
			{
				return this.GetTable<ShapeUnit>();
			}
		}
		
		public System.Data.Linq.Table<Substance> Substance
		{
			get
			{
				return this.GetTable<Substance>();
			}
		}
		
		public System.Data.Linq.Table<SubstanceDosingAdvice> SubstanceDosingAdvice
		{
			get
			{
				return this.GetTable<SubstanceDosingAdvice>();
			}
		}
		
		public System.Data.Linq.Table<SubstanceGroup> SubstanceGroup
		{
			get
			{
				return this.GetTable<SubstanceGroup>();
			}
		}
		
		public System.Data.Linq.Table<TextItem> TextItem
		{
			get
			{
				return this.GetTable<TextItem>();
			}
		}
		
		public System.Data.Linq.Table<TextLog> TextLog
		{
			get
			{
				return this.GetTable<TextLog>();
			}
		}
		
		public System.Data.Linq.Table<Unit> Unit
		{
			get
			{
				return this.GetTable<Unit>();
			}
		}
		
		public System.Data.Linq.Table<UnitGroup> UnitGroup
		{
			get
			{
				return this.GetTable<UnitGroup>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRole
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		[Function(Name="dbo.sp_EmptyAllTables")]
		public int sp_EmptyAllTables([Parameter(Name="ResetIdentity", DbType="Bit")] System.Nullable<bool> resetIdentity)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), resetIdentity);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Brand")]
	public partial class Brand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BrandId;
		
		private string _BrandName;
		
		private System.Data.Linq.Binary _VersionTimeStamp;
		
		private EntitySet<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBrandIdChanging(int value);
    partial void OnBrandIdChanged();
    partial void OnBrandNameChanging(string value);
    partial void OnBrandNameChanged();
    partial void OnVersionTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnVersionTimeStampChanged();
    #endregion
		
		public Brand()
		{
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			OnCreated();
		}
		
		[Column(Storage="_BrandId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int BrandId
		{
			get
			{
				return this._BrandId;
			}
			set
			{
				if ((this._BrandId != value))
				{
					this.OnBrandIdChanging(value);
					this.SendPropertyChanging();
					this._BrandId = value;
					this.SendPropertyChanged("BrandId");
					this.OnBrandIdChanged();
				}
			}
		}
		
		[Column(Storage="_BrandName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BrandName
		{
			get
			{
				return this._BrandName;
			}
			set
			{
				if ((this._BrandName != value))
				{
					this.OnBrandNameChanging(value);
					this.SendPropertyChanging();
					this._BrandName = value;
					this.SendPropertyChanged("BrandName");
					this.OnBrandNameChanged();
				}
			}
		}
		
		[Column(Storage="_VersionTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionTimeStamp
		{
			get
			{
				return this._VersionTimeStamp;
			}
			set
			{
				if ((this._VersionTimeStamp != value))
				{
					this.OnVersionTimeStampChanging(value);
					this.SendPropertyChanging();
					this._VersionTimeStamp = value;
					this.SendPropertyChanged("VersionTimeStamp");
					this.OnVersionTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Brand_Product", Storage="_Product", ThisKey="BrandId", OtherKey="BrandId")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Brand = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Brand = null;
		}
	}
	
	[Table(Name="dbo.Chapter")]
	public partial class Chapter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChapterId;
		
		private string _ChapterName;
		
		private System.Data.Linq.Binary _VersionTimeStamp;
		
		private EntitySet<FormulariumChapter> _FormulariumChapter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChapterIdChanging(int value);
    partial void OnChapterIdChanged();
    partial void OnChapterNameChanging(string value);
    partial void OnChapterNameChanged();
    partial void OnVersionTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnVersionTimeStampChanged();
    #endregion
		
		public Chapter()
		{
			this._FormulariumChapter = new EntitySet<FormulariumChapter>(new Action<FormulariumChapter>(this.attach_FormulariumChapter), new Action<FormulariumChapter>(this.detach_FormulariumChapter));
			OnCreated();
		}
		
		[Column(Storage="_ChapterId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ChapterId
		{
			get
			{
				return this._ChapterId;
			}
			set
			{
				if ((this._ChapterId != value))
				{
					this.OnChapterIdChanging(value);
					this.SendPropertyChanging();
					this._ChapterId = value;
					this.SendPropertyChanged("ChapterId");
					this.OnChapterIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChapterName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ChapterName
		{
			get
			{
				return this._ChapterName;
			}
			set
			{
				if ((this._ChapterName != value))
				{
					this.OnChapterNameChanging(value);
					this.SendPropertyChanging();
					this._ChapterName = value;
					this.SendPropertyChanged("ChapterName");
					this.OnChapterNameChanged();
				}
			}
		}
		
		[Column(Storage="_VersionTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionTimeStamp
		{
			get
			{
				return this._VersionTimeStamp;
			}
			set
			{
				if ((this._VersionTimeStamp != value))
				{
					this.OnVersionTimeStampChanging(value);
					this.SendPropertyChanging();
					this._VersionTimeStamp = value;
					this.SendPropertyChanged("VersionTimeStamp");
					this.OnVersionTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Chapter_FormulariumChapter", Storage="_FormulariumChapter", ThisKey="ChapterId", OtherKey="ChapterId")]
		public EntitySet<FormulariumChapter> FormulariumChapter
		{
			get
			{
				return this._FormulariumChapter;
			}
			set
			{
				this._FormulariumChapter.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FormulariumChapter(FormulariumChapter entity)
		{
			this.SendPropertyChanging();
			entity.Chapter = this;
		}
		
		private void detach_FormulariumChapter(FormulariumChapter entity)
		{
			this.SendPropertyChanging();
			entity.Chapter = null;
		}
	}
	
	[Table(Name="dbo.DosingAdviceChapter")]
	public partial class DosingAdviceChapter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DosingAdviceChapterId;
		
		private int _SubstanceDosingAdviceId;
		
		private int _FormulariumChapterId;
		
		private EntityRef<FormulariumChapter> _FormulariumChapter;
		
		private EntityRef<SubstanceDosingAdvice> _SubstanceDosingAdvice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDosingAdviceChapterIdChanging(int value);
    partial void OnDosingAdviceChapterIdChanged();
    partial void OnSubstanceDosingAdviceIdChanging(int value);
    partial void OnSubstanceDosingAdviceIdChanged();
    partial void OnFormulariumChapterIdChanging(int value);
    partial void OnFormulariumChapterIdChanged();
    #endregion
		
		public DosingAdviceChapter()
		{
			this._FormulariumChapter = default(EntityRef<FormulariumChapter>);
			this._SubstanceDosingAdvice = default(EntityRef<SubstanceDosingAdvice>);
			OnCreated();
		}
		
		[Column(Storage="_DosingAdviceChapterId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DosingAdviceChapterId
		{
			get
			{
				return this._DosingAdviceChapterId;
			}
			set
			{
				if ((this._DosingAdviceChapterId != value))
				{
					this.OnDosingAdviceChapterIdChanging(value);
					this.SendPropertyChanging();
					this._DosingAdviceChapterId = value;
					this.SendPropertyChanged("DosingAdviceChapterId");
					this.OnDosingAdviceChapterIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubstanceDosingAdviceId", DbType="Int NOT NULL")]
		public int SubstanceDosingAdviceId
		{
			get
			{
				return this._SubstanceDosingAdviceId;
			}
			set
			{
				if ((this._SubstanceDosingAdviceId != value))
				{
					if (this._SubstanceDosingAdvice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstanceDosingAdviceIdChanging(value);
					this.SendPropertyChanging();
					this._SubstanceDosingAdviceId = value;
					this.SendPropertyChanged("SubstanceDosingAdviceId");
					this.OnSubstanceDosingAdviceIdChanged();
				}
			}
		}
		
		[Column(Storage="_FormulariumChapterId", DbType="Int NOT NULL")]
		public int FormulariumChapterId
		{
			get
			{
				return this._FormulariumChapterId;
			}
			set
			{
				if ((this._FormulariumChapterId != value))
				{
					if (this._FormulariumChapter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormulariumChapterIdChanging(value);
					this.SendPropertyChanging();
					this._FormulariumChapterId = value;
					this.SendPropertyChanged("FormulariumChapterId");
					this.OnFormulariumChapterIdChanged();
				}
			}
		}
		
		[Association(Name="FormulariumChapter_DosingAdviceChapter", Storage="_FormulariumChapter", ThisKey="FormulariumChapterId", OtherKey="FormulariumChapterId", IsForeignKey=true)]
		public FormulariumChapter FormulariumChapter
		{
			get
			{
				return this._FormulariumChapter.Entity;
			}
			set
			{
				FormulariumChapter previousValue = this._FormulariumChapter.Entity;
				if (((previousValue != value) 
							|| (this._FormulariumChapter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormulariumChapter.Entity = null;
						previousValue.DosingAdviceChapter.Remove(this);
					}
					this._FormulariumChapter.Entity = value;
					if ((value != null))
					{
						value.DosingAdviceChapter.Add(this);
						this._FormulariumChapterId = value.FormulariumChapterId;
					}
					else
					{
						this._FormulariumChapterId = default(int);
					}
					this.SendPropertyChanged("FormulariumChapter");
				}
			}
		}
		
		[Association(Name="SubstanceDosingAdvice_DosingAdviceChapter", Storage="_SubstanceDosingAdvice", ThisKey="SubstanceDosingAdviceId", OtherKey="SubstanceDosingAdviceId", IsForeignKey=true)]
		public SubstanceDosingAdvice SubstanceDosingAdvice
		{
			get
			{
				return this._SubstanceDosingAdvice.Entity;
			}
			set
			{
				SubstanceDosingAdvice previousValue = this._SubstanceDosingAdvice.Entity;
				if (((previousValue != value) 
							|| (this._SubstanceDosingAdvice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubstanceDosingAdvice.Entity = null;
						previousValue.DosingAdviceChapter.Remove(this);
					}
					this._SubstanceDosingAdvice.Entity = value;
					if ((value != null))
					{
						value.DosingAdviceChapter.Add(this);
						this._SubstanceDosingAdviceId = value.SubstanceDosingAdviceId;
					}
					else
					{
						this._SubstanceDosingAdviceId = default(int);
					}
					this.SendPropertyChanged("SubstanceDosingAdvice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DosingAdviceProduct")]
	public partial class DosingAdviceProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DosingAdviceProductId;
		
		private int _SubstanceDosingAdviceId;
		
		private int _ProductId;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<SubstanceDosingAdvice> _SubstanceDosingAdvice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDosingAdviceProductIdChanging(int value);
    partial void OnDosingAdviceProductIdChanged();
    partial void OnSubstanceDosingAdviceIdChanging(int value);
    partial void OnSubstanceDosingAdviceIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    #endregion
		
		public DosingAdviceProduct()
		{
			this._Product = default(EntityRef<Product>);
			this._SubstanceDosingAdvice = default(EntityRef<SubstanceDosingAdvice>);
			OnCreated();
		}
		
		[Column(Storage="_DosingAdviceProductId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DosingAdviceProductId
		{
			get
			{
				return this._DosingAdviceProductId;
			}
			set
			{
				if ((this._DosingAdviceProductId != value))
				{
					this.OnDosingAdviceProductIdChanging(value);
					this.SendPropertyChanging();
					this._DosingAdviceProductId = value;
					this.SendPropertyChanged("DosingAdviceProductId");
					this.OnDosingAdviceProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubstanceDosingAdviceId", DbType="Int NOT NULL")]
		public int SubstanceDosingAdviceId
		{
			get
			{
				return this._SubstanceDosingAdviceId;
			}
			set
			{
				if ((this._SubstanceDosingAdviceId != value))
				{
					if (this._SubstanceDosingAdvice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstanceDosingAdviceIdChanging(value);
					this.SendPropertyChanging();
					this._SubstanceDosingAdviceId = value;
					this.SendPropertyChanged("SubstanceDosingAdviceId");
					this.OnSubstanceDosingAdviceIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Association(Name="Product_DosingAdviceProduct", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.DosingAdviceProduct.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.DosingAdviceProduct.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="SubstanceDosingAdvice_DosingAdviceProduct", Storage="_SubstanceDosingAdvice", ThisKey="SubstanceDosingAdviceId", OtherKey="SubstanceDosingAdviceId", IsForeignKey=true)]
		public SubstanceDosingAdvice SubstanceDosingAdvice
		{
			get
			{
				return this._SubstanceDosingAdvice.Entity;
			}
			set
			{
				SubstanceDosingAdvice previousValue = this._SubstanceDosingAdvice.Entity;
				if (((previousValue != value) 
							|| (this._SubstanceDosingAdvice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubstanceDosingAdvice.Entity = null;
						previousValue.DosingAdviceProduct.Remove(this);
					}
					this._SubstanceDosingAdvice.Entity = value;
					if ((value != null))
					{
						value.DosingAdviceProduct.Add(this);
						this._SubstanceDosingAdviceId = value.SubstanceDosingAdviceId;
					}
					else
					{
						this._SubstanceDosingAdviceId = default(int);
					}
					this.SendPropertyChanged("SubstanceDosingAdvice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DosingAdviceRoute")]
	public partial class DosingAdviceRoute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DosingAdviceRouteId;
		
		private int _SubstanceDosingAdviceId;
		
		private int _RouteId;
		
		private EntityRef<Route> _Route;
		
		private EntityRef<SubstanceDosingAdvice> _SubstanceDosingAdvice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDosingAdviceRouteIdChanging(int value);
    partial void OnDosingAdviceRouteIdChanged();
    partial void OnSubstanceDosingAdviceIdChanging(int value);
    partial void OnSubstanceDosingAdviceIdChanged();
    partial void OnRouteIdChanging(int value);
    partial void OnRouteIdChanged();
    #endregion
		
		public DosingAdviceRoute()
		{
			this._Route = default(EntityRef<Route>);
			this._SubstanceDosingAdvice = default(EntityRef<SubstanceDosingAdvice>);
			OnCreated();
		}
		
		[Column(Storage="_DosingAdviceRouteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DosingAdviceRouteId
		{
			get
			{
				return this._DosingAdviceRouteId;
			}
			set
			{
				if ((this._DosingAdviceRouteId != value))
				{
					this.OnDosingAdviceRouteIdChanging(value);
					this.SendPropertyChanging();
					this._DosingAdviceRouteId = value;
					this.SendPropertyChanged("DosingAdviceRouteId");
					this.OnDosingAdviceRouteIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubstanceDosingAdviceId", DbType="Int NOT NULL")]
		public int SubstanceDosingAdviceId
		{
			get
			{
				return this._SubstanceDosingAdviceId;
			}
			set
			{
				if ((this._SubstanceDosingAdviceId != value))
				{
					if (this._SubstanceDosingAdvice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstanceDosingAdviceIdChanging(value);
					this.SendPropertyChanging();
					this._SubstanceDosingAdviceId = value;
					this.SendPropertyChanged("SubstanceDosingAdviceId");
					this.OnSubstanceDosingAdviceIdChanged();
				}
			}
		}
		
		[Column(Storage="_RouteId", DbType="Int NOT NULL")]
		public int RouteId
		{
			get
			{
				return this._RouteId;
			}
			set
			{
				if ((this._RouteId != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteIdChanging(value);
					this.SendPropertyChanging();
					this._RouteId = value;
					this.SendPropertyChanged("RouteId");
					this.OnRouteIdChanged();
				}
			}
		}
		
		[Association(Name="Route_DosingAdviceRoute", Storage="_Route", ThisKey="RouteId", OtherKey="RouteId", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.DosingAdviceRoute.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.DosingAdviceRoute.Add(this);
						this._RouteId = value.RouteId;
					}
					else
					{
						this._RouteId = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		[Association(Name="SubstanceDosingAdvice_DosingAdviceRoute", Storage="_SubstanceDosingAdvice", ThisKey="SubstanceDosingAdviceId", OtherKey="SubstanceDosingAdviceId", IsForeignKey=true)]
		public SubstanceDosingAdvice SubstanceDosingAdvice
		{
			get
			{
				return this._SubstanceDosingAdvice.Entity;
			}
			set
			{
				SubstanceDosingAdvice previousValue = this._SubstanceDosingAdvice.Entity;
				if (((previousValue != value) 
							|| (this._SubstanceDosingAdvice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubstanceDosingAdvice.Entity = null;
						previousValue.DosingAdviceRoute.Remove(this);
					}
					this._SubstanceDosingAdvice.Entity = value;
					if ((value != null))
					{
						value.DosingAdviceRoute.Add(this);
						this._SubstanceDosingAdviceId = value.SubstanceDosingAdviceId;
					}
					else
					{
						this._SubstanceDosingAdviceId = default(int);
					}
					this.SendPropertyChanged("SubstanceDosingAdvice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Formularium")]
	public partial class Formularium : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FormulariumId;
		
		private string _FormulariumName;
		
		private System.Data.Linq.Binary _VersionTimeStamp;
		
		private int _PharmacistId;
		
		private EntitySet<FormulariumChapter> _FormulariumChapter;
		
		private EntitySet<FormulariumPharmacist> _FormulariumPharmacist;
		
		private EntitySet<FormulariumSubstanceText> _FormulariumSubstanceText;
		
		private EntitySet<FormulariumText> _FormulariumText;
		
		private EntitySet<ProductFormulariumText> _ProductFormulariumText;
		
		private EntitySet<SubstanceDosingAdvice> _SubstanceDosingAdvice;
		
		private EntitySet<TextLog> _TextLog;
		
		private EntityRef<Pharmacist> _Pharmacist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormulariumIdChanging(int value);
    partial void OnFormulariumIdChanged();
    partial void OnFormulariumNameChanging(string value);
    partial void OnFormulariumNameChanged();
    partial void OnVersionTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnVersionTimeStampChanged();
    partial void OnPharmacistIdChanging(int value);
    partial void OnPharmacistIdChanged();
    #endregion
		
		public Formularium()
		{
			this._FormulariumChapter = new EntitySet<FormulariumChapter>(new Action<FormulariumChapter>(this.attach_FormulariumChapter), new Action<FormulariumChapter>(this.detach_FormulariumChapter));
			this._FormulariumPharmacist = new EntitySet<FormulariumPharmacist>(new Action<FormulariumPharmacist>(this.attach_FormulariumPharmacist), new Action<FormulariumPharmacist>(this.detach_FormulariumPharmacist));
			this._FormulariumSubstanceText = new EntitySet<FormulariumSubstanceText>(new Action<FormulariumSubstanceText>(this.attach_FormulariumSubstanceText), new Action<FormulariumSubstanceText>(this.detach_FormulariumSubstanceText));
			this._FormulariumText = new EntitySet<FormulariumText>(new Action<FormulariumText>(this.attach_FormulariumText), new Action<FormulariumText>(this.detach_FormulariumText));
			this._ProductFormulariumText = new EntitySet<ProductFormulariumText>(new Action<ProductFormulariumText>(this.attach_ProductFormulariumText), new Action<ProductFormulariumText>(this.detach_ProductFormulariumText));
			this._SubstanceDosingAdvice = new EntitySet<SubstanceDosingAdvice>(new Action<SubstanceDosingAdvice>(this.attach_SubstanceDosingAdvice), new Action<SubstanceDosingAdvice>(this.detach_SubstanceDosingAdvice));
			this._TextLog = new EntitySet<TextLog>(new Action<TextLog>(this.attach_TextLog), new Action<TextLog>(this.detach_TextLog));
			this._Pharmacist = default(EntityRef<Pharmacist>);
			OnCreated();
		}
		
		[Column(Storage="_FormulariumId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int FormulariumId
		{
			get
			{
				return this._FormulariumId;
			}
			set
			{
				if ((this._FormulariumId != value))
				{
					this.OnFormulariumIdChanging(value);
					this.SendPropertyChanging();
					this._FormulariumId = value;
					this.SendPropertyChanged("FormulariumId");
					this.OnFormulariumIdChanged();
				}
			}
		}
		
		[Column(Storage="_FormulariumName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FormulariumName
		{
			get
			{
				return this._FormulariumName;
			}
			set
			{
				if ((this._FormulariumName != value))
				{
					this.OnFormulariumNameChanging(value);
					this.SendPropertyChanging();
					this._FormulariumName = value;
					this.SendPropertyChanged("FormulariumName");
					this.OnFormulariumNameChanged();
				}
			}
		}
		
		[Column(Storage="_VersionTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionTimeStamp
		{
			get
			{
				return this._VersionTimeStamp;
			}
			set
			{
				if ((this._VersionTimeStamp != value))
				{
					this.OnVersionTimeStampChanging(value);
					this.SendPropertyChanging();
					this._VersionTimeStamp = value;
					this.SendPropertyChanged("VersionTimeStamp");
					this.OnVersionTimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_PharmacistId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PharmacistId
		{
			get
			{
				return this._PharmacistId;
			}
			set
			{
				if ((this._PharmacistId != value))
				{
					if (this._Pharmacist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPharmacistIdChanging(value);
					this.SendPropertyChanging();
					this._PharmacistId = value;
					this.SendPropertyChanged("PharmacistId");
					this.OnPharmacistIdChanged();
				}
			}
		}
		
		[Association(Name="Formularium_FormulariumChapter", Storage="_FormulariumChapter", ThisKey="FormulariumId", OtherKey="FormulariumId")]
		public EntitySet<FormulariumChapter> FormulariumChapter
		{
			get
			{
				return this._FormulariumChapter;
			}
			set
			{
				this._FormulariumChapter.Assign(value);
			}
		}
		
		[Association(Name="Formularium_FormulariumPharmacist", Storage="_FormulariumPharmacist", ThisKey="FormulariumId", OtherKey="FormulariumId")]
		public EntitySet<FormulariumPharmacist> FormulariumPharmacist
		{
			get
			{
				return this._FormulariumPharmacist;
			}
			set
			{
				this._FormulariumPharmacist.Assign(value);
			}
		}
		
		[Association(Name="Formularium_FormulariumSubstanceText", Storage="_FormulariumSubstanceText", ThisKey="FormulariumId", OtherKey="FormulariumId")]
		public EntitySet<FormulariumSubstanceText> FormulariumSubstanceText
		{
			get
			{
				return this._FormulariumSubstanceText;
			}
			set
			{
				this._FormulariumSubstanceText.Assign(value);
			}
		}
		
		[Association(Name="Formularium_FormulariumText", Storage="_FormulariumText", ThisKey="FormulariumId", OtherKey="FormulariumId")]
		public EntitySet<FormulariumText> FormulariumText
		{
			get
			{
				return this._FormulariumText;
			}
			set
			{
				this._FormulariumText.Assign(value);
			}
		}
		
		[Association(Name="Formularium_ProductFormulariumText", Storage="_ProductFormulariumText", ThisKey="FormulariumId", OtherKey="FormulariumId")]
		public EntitySet<ProductFormulariumText> ProductFormulariumText
		{
			get
			{
				return this._ProductFormulariumText;
			}
			set
			{
				this._ProductFormulariumText.Assign(value);
			}
		}
		
		[Association(Name="Formularium_SubstanceDosingAdvice", Storage="_SubstanceDosingAdvice", ThisKey="FormulariumId", OtherKey="FormulariumId")]
		public EntitySet<SubstanceDosingAdvice> SubstanceDosingAdvice
		{
			get
			{
				return this._SubstanceDosingAdvice;
			}
			set
			{
				this._SubstanceDosingAdvice.Assign(value);
			}
		}
		
		[Association(Name="Formularium_TextLog", Storage="_TextLog", ThisKey="FormulariumId", OtherKey="FormulariumId")]
		public EntitySet<TextLog> TextLog
		{
			get
			{
				return this._TextLog;
			}
			set
			{
				this._TextLog.Assign(value);
			}
		}
		
		[Association(Name="Pharmacist_Formularium", Storage="_Pharmacist", ThisKey="PharmacistId", OtherKey="PharmacistId", IsForeignKey=true)]
		public Pharmacist Pharmacist
		{
			get
			{
				return this._Pharmacist.Entity;
			}
			set
			{
				Pharmacist previousValue = this._Pharmacist.Entity;
				if (((previousValue != value) 
							|| (this._Pharmacist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pharmacist.Entity = null;
						previousValue.Formularium.Remove(this);
					}
					this._Pharmacist.Entity = value;
					if ((value != null))
					{
						value.Formularium.Add(this);
						this._PharmacistId = value.PharmacistId;
					}
					else
					{
						this._PharmacistId = default(int);
					}
					this.SendPropertyChanged("Pharmacist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FormulariumChapter(FormulariumChapter entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = this;
		}
		
		private void detach_FormulariumChapter(FormulariumChapter entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = null;
		}
		
		private void attach_FormulariumPharmacist(FormulariumPharmacist entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = this;
		}
		
		private void detach_FormulariumPharmacist(FormulariumPharmacist entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = null;
		}
		
		private void attach_FormulariumSubstanceText(FormulariumSubstanceText entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = this;
		}
		
		private void detach_FormulariumSubstanceText(FormulariumSubstanceText entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = null;
		}
		
		private void attach_FormulariumText(FormulariumText entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = this;
		}
		
		private void detach_FormulariumText(FormulariumText entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = null;
		}
		
		private void attach_ProductFormulariumText(ProductFormulariumText entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = this;
		}
		
		private void detach_ProductFormulariumText(ProductFormulariumText entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = null;
		}
		
		private void attach_SubstanceDosingAdvice(SubstanceDosingAdvice entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = this;
		}
		
		private void detach_SubstanceDosingAdvice(SubstanceDosingAdvice entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = null;
		}
		
		private void attach_TextLog(TextLog entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = this;
		}
		
		private void detach_TextLog(TextLog entity)
		{
			this.SendPropertyChanging();
			entity.Formularium = null;
		}
	}
	
	[Table(Name="dbo.FormulariumChapter")]
	public partial class FormulariumChapter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FormulariumChapterId;
		
		private int _FormulariumId;
		
		private int _ChapterId;
		
		private System.Data.Linq.Binary _VersionTimeStamp;
		
		private System.Nullable<int> _MainChapterId;
		
		private EntitySet<DosingAdviceChapter> _DosingAdviceChapter;
		
		private EntitySet<FormulariumChapter> _FormulariumChapter2;
		
		private EntitySet<FormulariumChapterText> _FormulariumChapterText;
		
		private EntityRef<Formularium> _Formularium;
		
		private EntityRef<Chapter> _Chapter;
		
		private EntityRef<FormulariumChapter> _FormulariumChapter1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormulariumChapterIdChanging(int value);
    partial void OnFormulariumChapterIdChanged();
    partial void OnFormulariumIdChanging(int value);
    partial void OnFormulariumIdChanged();
    partial void OnChapterIdChanging(int value);
    partial void OnChapterIdChanged();
    partial void OnVersionTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnVersionTimeStampChanged();
    partial void OnMainChapterIdChanging(System.Nullable<int> value);
    partial void OnMainChapterIdChanged();
    #endregion
		
		public FormulariumChapter()
		{
			this._DosingAdviceChapter = new EntitySet<DosingAdviceChapter>(new Action<DosingAdviceChapter>(this.attach_DosingAdviceChapter), new Action<DosingAdviceChapter>(this.detach_DosingAdviceChapter));
			this._FormulariumChapter2 = new EntitySet<FormulariumChapter>(new Action<FormulariumChapter>(this.attach_FormulariumChapter2), new Action<FormulariumChapter>(this.detach_FormulariumChapter2));
			this._FormulariumChapterText = new EntitySet<FormulariumChapterText>(new Action<FormulariumChapterText>(this.attach_FormulariumChapterText), new Action<FormulariumChapterText>(this.detach_FormulariumChapterText));
			this._Formularium = default(EntityRef<Formularium>);
			this._Chapter = default(EntityRef<Chapter>);
			this._FormulariumChapter1 = default(EntityRef<FormulariumChapter>);
			OnCreated();
		}
		
		[Column(Storage="_FormulariumChapterId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int FormulariumChapterId
		{
			get
			{
				return this._FormulariumChapterId;
			}
			set
			{
				if ((this._FormulariumChapterId != value))
				{
					this.OnFormulariumChapterIdChanging(value);
					this.SendPropertyChanging();
					this._FormulariumChapterId = value;
					this.SendPropertyChanged("FormulariumChapterId");
					this.OnFormulariumChapterIdChanged();
				}
			}
		}
		
		[Column(Storage="_FormulariumId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FormulariumId
		{
			get
			{
				return this._FormulariumId;
			}
			set
			{
				if ((this._FormulariumId != value))
				{
					if (this._Formularium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormulariumIdChanging(value);
					this.SendPropertyChanging();
					this._FormulariumId = value;
					this.SendPropertyChanged("FormulariumId");
					this.OnFormulariumIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChapterId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ChapterId
		{
			get
			{
				return this._ChapterId;
			}
			set
			{
				if ((this._ChapterId != value))
				{
					if (this._Chapter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChapterIdChanging(value);
					this.SendPropertyChanging();
					this._ChapterId = value;
					this.SendPropertyChanged("ChapterId");
					this.OnChapterIdChanged();
				}
			}
		}
		
		[Column(Storage="_VersionTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionTimeStamp
		{
			get
			{
				return this._VersionTimeStamp;
			}
			set
			{
				if ((this._VersionTimeStamp != value))
				{
					this.OnVersionTimeStampChanging(value);
					this.SendPropertyChanging();
					this._VersionTimeStamp = value;
					this.SendPropertyChanged("VersionTimeStamp");
					this.OnVersionTimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_MainChapterId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MainChapterId
		{
			get
			{
				return this._MainChapterId;
			}
			set
			{
				if ((this._MainChapterId != value))
				{
					if (this._FormulariumChapter1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMainChapterIdChanging(value);
					this.SendPropertyChanging();
					this._MainChapterId = value;
					this.SendPropertyChanged("MainChapterId");
					this.OnMainChapterIdChanged();
				}
			}
		}
		
		[Association(Name="FormulariumChapter_DosingAdviceChapter", Storage="_DosingAdviceChapter", ThisKey="FormulariumChapterId", OtherKey="FormulariumChapterId")]
		public EntitySet<DosingAdviceChapter> DosingAdviceChapter
		{
			get
			{
				return this._DosingAdviceChapter;
			}
			set
			{
				this._DosingAdviceChapter.Assign(value);
			}
		}
		
		[Association(Name="FormulariumChapter_FormulariumChapter", Storage="_FormulariumChapter2", ThisKey="FormulariumChapterId", OtherKey="MainChapterId")]
		public EntitySet<FormulariumChapter> FormulariumChapter2
		{
			get
			{
				return this._FormulariumChapter2;
			}
			set
			{
				this._FormulariumChapter2.Assign(value);
			}
		}
		
		[Association(Name="FormulariumChapter_FormulariumChapterText", Storage="_FormulariumChapterText", ThisKey="FormulariumChapterId", OtherKey="FormulariumChapterId")]
		public EntitySet<FormulariumChapterText> FormulariumChapterText
		{
			get
			{
				return this._FormulariumChapterText;
			}
			set
			{
				this._FormulariumChapterText.Assign(value);
			}
		}
		
		[Association(Name="Formularium_FormulariumChapter", Storage="_Formularium", ThisKey="FormulariumId", OtherKey="FormulariumId", IsForeignKey=true)]
		public Formularium Formularium
		{
			get
			{
				return this._Formularium.Entity;
			}
			set
			{
				Formularium previousValue = this._Formularium.Entity;
				if (((previousValue != value) 
							|| (this._Formularium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formularium.Entity = null;
						previousValue.FormulariumChapter.Remove(this);
					}
					this._Formularium.Entity = value;
					if ((value != null))
					{
						value.FormulariumChapter.Add(this);
						this._FormulariumId = value.FormulariumId;
					}
					else
					{
						this._FormulariumId = default(int);
					}
					this.SendPropertyChanged("Formularium");
				}
			}
		}
		
		[Association(Name="Chapter_FormulariumChapter", Storage="_Chapter", ThisKey="ChapterId", OtherKey="ChapterId", IsForeignKey=true)]
		public Chapter Chapter
		{
			get
			{
				return this._Chapter.Entity;
			}
			set
			{
				Chapter previousValue = this._Chapter.Entity;
				if (((previousValue != value) 
							|| (this._Chapter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chapter.Entity = null;
						previousValue.FormulariumChapter.Remove(this);
					}
					this._Chapter.Entity = value;
					if ((value != null))
					{
						value.FormulariumChapter.Add(this);
						this._ChapterId = value.ChapterId;
					}
					else
					{
						this._ChapterId = default(int);
					}
					this.SendPropertyChanged("Chapter");
				}
			}
		}
		
		[Association(Name="FormulariumChapter_FormulariumChapter", Storage="_FormulariumChapter1", ThisKey="MainChapterId", OtherKey="FormulariumChapterId", IsForeignKey=true)]
		public FormulariumChapter FormulariumChapter1
		{
			get
			{
				return this._FormulariumChapter1.Entity;
			}
			set
			{
				FormulariumChapter previousValue = this._FormulariumChapter1.Entity;
				if (((previousValue != value) 
							|| (this._FormulariumChapter1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormulariumChapter1.Entity = null;
						previousValue.FormulariumChapter2.Remove(this);
					}
					this._FormulariumChapter1.Entity = value;
					if ((value != null))
					{
						value.FormulariumChapter2.Add(this);
						this._MainChapterId = value.FormulariumChapterId;
					}
					else
					{
						this._MainChapterId = default(Nullable<int>);
					}
					this.SendPropertyChanged("FormulariumChapter1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DosingAdviceChapter(DosingAdviceChapter entity)
		{
			this.SendPropertyChanging();
			entity.FormulariumChapter = this;
		}
		
		private void detach_DosingAdviceChapter(DosingAdviceChapter entity)
		{
			this.SendPropertyChanging();
			entity.FormulariumChapter = null;
		}
		
		private void attach_FormulariumChapter2(FormulariumChapter entity)
		{
			this.SendPropertyChanging();
			entity.FormulariumChapter1 = this;
		}
		
		private void detach_FormulariumChapter2(FormulariumChapter entity)
		{
			this.SendPropertyChanging();
			entity.FormulariumChapter1 = null;
		}
		
		private void attach_FormulariumChapterText(FormulariumChapterText entity)
		{
			this.SendPropertyChanging();
			entity.FormulariumChapter = this;
		}
		
		private void detach_FormulariumChapterText(FormulariumChapterText entity)
		{
			this.SendPropertyChanging();
			entity.FormulariumChapter = null;
		}
	}
	
	[Table(Name="dbo.FormulariumChapterText")]
	public partial class FormulariumChapterText : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FormulariumChapterTextId;
		
		private int _FormulariumChapterId;
		
		private int _TextItemId;
		
		private EntityRef<FormulariumChapter> _FormulariumChapter;
		
		private EntityRef<TextItem> _TextItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormulariumChapterTextIdChanging(int value);
    partial void OnFormulariumChapterTextIdChanged();
    partial void OnFormulariumChapterIdChanging(int value);
    partial void OnFormulariumChapterIdChanged();
    partial void OnTextItemIdChanging(int value);
    partial void OnTextItemIdChanged();
    #endregion
		
		public FormulariumChapterText()
		{
			this._FormulariumChapter = default(EntityRef<FormulariumChapter>);
			this._TextItem = default(EntityRef<TextItem>);
			OnCreated();
		}
		
		[Column(Storage="_FormulariumChapterTextId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FormulariumChapterTextId
		{
			get
			{
				return this._FormulariumChapterTextId;
			}
			set
			{
				if ((this._FormulariumChapterTextId != value))
				{
					this.OnFormulariumChapterTextIdChanging(value);
					this.SendPropertyChanging();
					this._FormulariumChapterTextId = value;
					this.SendPropertyChanged("FormulariumChapterTextId");
					this.OnFormulariumChapterTextIdChanged();
				}
			}
		}
		
		[Column(Storage="_FormulariumChapterId", DbType="Int NOT NULL")]
		public int FormulariumChapterId
		{
			get
			{
				return this._FormulariumChapterId;
			}
			set
			{
				if ((this._FormulariumChapterId != value))
				{
					if (this._FormulariumChapter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormulariumChapterIdChanging(value);
					this.SendPropertyChanging();
					this._FormulariumChapterId = value;
					this.SendPropertyChanged("FormulariumChapterId");
					this.OnFormulariumChapterIdChanged();
				}
			}
		}
		
		[Column(Storage="_TextItemId", DbType="Int NOT NULL")]
		public int TextItemId
		{
			get
			{
				return this._TextItemId;
			}
			set
			{
				if ((this._TextItemId != value))
				{
					if (this._TextItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextItemIdChanging(value);
					this.SendPropertyChanging();
					this._TextItemId = value;
					this.SendPropertyChanged("TextItemId");
					this.OnTextItemIdChanged();
				}
			}
		}
		
		[Association(Name="FormulariumChapter_FormulariumChapterText", Storage="_FormulariumChapter", ThisKey="FormulariumChapterId", OtherKey="FormulariumChapterId", IsForeignKey=true)]
		public FormulariumChapter FormulariumChapter
		{
			get
			{
				return this._FormulariumChapter.Entity;
			}
			set
			{
				FormulariumChapter previousValue = this._FormulariumChapter.Entity;
				if (((previousValue != value) 
							|| (this._FormulariumChapter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormulariumChapter.Entity = null;
						previousValue.FormulariumChapterText.Remove(this);
					}
					this._FormulariumChapter.Entity = value;
					if ((value != null))
					{
						value.FormulariumChapterText.Add(this);
						this._FormulariumChapterId = value.FormulariumChapterId;
					}
					else
					{
						this._FormulariumChapterId = default(int);
					}
					this.SendPropertyChanged("FormulariumChapter");
				}
			}
		}
		
		[Association(Name="TextItem_FormulariumChapterText", Storage="_TextItem", ThisKey="TextItemId", OtherKey="TextItemId", IsForeignKey=true)]
		public TextItem TextItem
		{
			get
			{
				return this._TextItem.Entity;
			}
			set
			{
				TextItem previousValue = this._TextItem.Entity;
				if (((previousValue != value) 
							|| (this._TextItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TextItem.Entity = null;
						previousValue.FormulariumChapterText.Remove(this);
					}
					this._TextItem.Entity = value;
					if ((value != null))
					{
						value.FormulariumChapterText.Add(this);
						this._TextItemId = value.TextItemId;
					}
					else
					{
						this._TextItemId = default(int);
					}
					this.SendPropertyChanged("TextItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FormulariumPharmacist")]
	public partial class FormulariumPharmacist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FormulariumPharmacistId;
		
		private int _PharmacistId;
		
		private int _FormulariumId;
		
		private EntityRef<Formularium> _Formularium;
		
		private EntityRef<Pharmacist> _Pharmacist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormulariumPharmacistIdChanging(int value);
    partial void OnFormulariumPharmacistIdChanged();
    partial void OnPharmacistIdChanging(int value);
    partial void OnPharmacistIdChanged();
    partial void OnFormulariumIdChanging(int value);
    partial void OnFormulariumIdChanged();
    #endregion
		
		public FormulariumPharmacist()
		{
			this._Formularium = default(EntityRef<Formularium>);
			this._Pharmacist = default(EntityRef<Pharmacist>);
			OnCreated();
		}
		
		[Column(Storage="_FormulariumPharmacistId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FormulariumPharmacistId
		{
			get
			{
				return this._FormulariumPharmacistId;
			}
			set
			{
				if ((this._FormulariumPharmacistId != value))
				{
					this.OnFormulariumPharmacistIdChanging(value);
					this.SendPropertyChanging();
					this._FormulariumPharmacistId = value;
					this.SendPropertyChanged("FormulariumPharmacistId");
					this.OnFormulariumPharmacistIdChanged();
				}
			}
		}
		
		[Column(Storage="_PharmacistId", DbType="Int NOT NULL")]
		public int PharmacistId
		{
			get
			{
				return this._PharmacistId;
			}
			set
			{
				if ((this._PharmacistId != value))
				{
					if (this._Pharmacist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPharmacistIdChanging(value);
					this.SendPropertyChanging();
					this._PharmacistId = value;
					this.SendPropertyChanged("PharmacistId");
					this.OnPharmacistIdChanged();
				}
			}
		}
		
		[Column(Storage="_FormulariumId", DbType="Int NOT NULL")]
		public int FormulariumId
		{
			get
			{
				return this._FormulariumId;
			}
			set
			{
				if ((this._FormulariumId != value))
				{
					if (this._Formularium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormulariumIdChanging(value);
					this.SendPropertyChanging();
					this._FormulariumId = value;
					this.SendPropertyChanged("FormulariumId");
					this.OnFormulariumIdChanged();
				}
			}
		}
		
		[Association(Name="Formularium_FormulariumPharmacist", Storage="_Formularium", ThisKey="FormulariumId", OtherKey="FormulariumId", IsForeignKey=true)]
		public Formularium Formularium
		{
			get
			{
				return this._Formularium.Entity;
			}
			set
			{
				Formularium previousValue = this._Formularium.Entity;
				if (((previousValue != value) 
							|| (this._Formularium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formularium.Entity = null;
						previousValue.FormulariumPharmacist.Remove(this);
					}
					this._Formularium.Entity = value;
					if ((value != null))
					{
						value.FormulariumPharmacist.Add(this);
						this._FormulariumId = value.FormulariumId;
					}
					else
					{
						this._FormulariumId = default(int);
					}
					this.SendPropertyChanged("Formularium");
				}
			}
		}
		
		[Association(Name="Pharmacist_FormulariumPharmacist", Storage="_Pharmacist", ThisKey="PharmacistId", OtherKey="PharmacistId", IsForeignKey=true)]
		public Pharmacist Pharmacist
		{
			get
			{
				return this._Pharmacist.Entity;
			}
			set
			{
				Pharmacist previousValue = this._Pharmacist.Entity;
				if (((previousValue != value) 
							|| (this._Pharmacist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pharmacist.Entity = null;
						previousValue.FormulariumPharmacist.Remove(this);
					}
					this._Pharmacist.Entity = value;
					if ((value != null))
					{
						value.FormulariumPharmacist.Add(this);
						this._PharmacistId = value.PharmacistId;
					}
					else
					{
						this._PharmacistId = default(int);
					}
					this.SendPropertyChanged("Pharmacist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FormulariumSubstanceText")]
	public partial class FormulariumSubstanceText : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FormulariumSubstanceTextId;
		
		private int _SubstanceId;
		
		private int _FormulariumId;
		
		private int _TextItemId;
		
		private EntityRef<Formularium> _Formularium;
		
		private EntityRef<Substance> _Substance;
		
		private EntityRef<TextItem> _TextItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormulariumSubstanceTextIdChanging(int value);
    partial void OnFormulariumSubstanceTextIdChanged();
    partial void OnSubstanceIdChanging(int value);
    partial void OnSubstanceIdChanged();
    partial void OnFormulariumIdChanging(int value);
    partial void OnFormulariumIdChanged();
    partial void OnTextItemIdChanging(int value);
    partial void OnTextItemIdChanged();
    #endregion
		
		public FormulariumSubstanceText()
		{
			this._Formularium = default(EntityRef<Formularium>);
			this._Substance = default(EntityRef<Substance>);
			this._TextItem = default(EntityRef<TextItem>);
			OnCreated();
		}
		
		[Column(Storage="_FormulariumSubstanceTextId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FormulariumSubstanceTextId
		{
			get
			{
				return this._FormulariumSubstanceTextId;
			}
			set
			{
				if ((this._FormulariumSubstanceTextId != value))
				{
					this.OnFormulariumSubstanceTextIdChanging(value);
					this.SendPropertyChanging();
					this._FormulariumSubstanceTextId = value;
					this.SendPropertyChanged("FormulariumSubstanceTextId");
					this.OnFormulariumSubstanceTextIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubstanceId", DbType="Int NOT NULL")]
		public int SubstanceId
		{
			get
			{
				return this._SubstanceId;
			}
			set
			{
				if ((this._SubstanceId != value))
				{
					if (this._Substance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstanceIdChanging(value);
					this.SendPropertyChanging();
					this._SubstanceId = value;
					this.SendPropertyChanged("SubstanceId");
					this.OnSubstanceIdChanged();
				}
			}
		}
		
		[Column(Storage="_FormulariumId", DbType="Int NOT NULL")]
		public int FormulariumId
		{
			get
			{
				return this._FormulariumId;
			}
			set
			{
				if ((this._FormulariumId != value))
				{
					if (this._Formularium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormulariumIdChanging(value);
					this.SendPropertyChanging();
					this._FormulariumId = value;
					this.SendPropertyChanged("FormulariumId");
					this.OnFormulariumIdChanged();
				}
			}
		}
		
		[Column(Storage="_TextItemId", DbType="Int NOT NULL")]
		public int TextItemId
		{
			get
			{
				return this._TextItemId;
			}
			set
			{
				if ((this._TextItemId != value))
				{
					if (this._TextItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextItemIdChanging(value);
					this.SendPropertyChanging();
					this._TextItemId = value;
					this.SendPropertyChanged("TextItemId");
					this.OnTextItemIdChanged();
				}
			}
		}
		
		[Association(Name="Formularium_FormulariumSubstanceText", Storage="_Formularium", ThisKey="FormulariumId", OtherKey="FormulariumId", IsForeignKey=true)]
		public Formularium Formularium
		{
			get
			{
				return this._Formularium.Entity;
			}
			set
			{
				Formularium previousValue = this._Formularium.Entity;
				if (((previousValue != value) 
							|| (this._Formularium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formularium.Entity = null;
						previousValue.FormulariumSubstanceText.Remove(this);
					}
					this._Formularium.Entity = value;
					if ((value != null))
					{
						value.FormulariumSubstanceText.Add(this);
						this._FormulariumId = value.FormulariumId;
					}
					else
					{
						this._FormulariumId = default(int);
					}
					this.SendPropertyChanged("Formularium");
				}
			}
		}
		
		[Association(Name="Substance_FormulariumSubstanceText", Storage="_Substance", ThisKey="SubstanceId", OtherKey="SubstanceId", IsForeignKey=true)]
		public Substance Substance
		{
			get
			{
				return this._Substance.Entity;
			}
			set
			{
				Substance previousValue = this._Substance.Entity;
				if (((previousValue != value) 
							|| (this._Substance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Substance.Entity = null;
						previousValue.FormulariumSubstanceText.Remove(this);
					}
					this._Substance.Entity = value;
					if ((value != null))
					{
						value.FormulariumSubstanceText.Add(this);
						this._SubstanceId = value.SubstanceId;
					}
					else
					{
						this._SubstanceId = default(int);
					}
					this.SendPropertyChanged("Substance");
				}
			}
		}
		
		[Association(Name="TextItem_FormulariumSubstanceText", Storage="_TextItem", ThisKey="TextItemId", OtherKey="TextItemId", IsForeignKey=true)]
		public TextItem TextItem
		{
			get
			{
				return this._TextItem.Entity;
			}
			set
			{
				TextItem previousValue = this._TextItem.Entity;
				if (((previousValue != value) 
							|| (this._TextItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TextItem.Entity = null;
						previousValue.FormulariumSubstanceText.Remove(this);
					}
					this._TextItem.Entity = value;
					if ((value != null))
					{
						value.FormulariumSubstanceText.Add(this);
						this._TextItemId = value.TextItemId;
					}
					else
					{
						this._TextItemId = default(int);
					}
					this.SendPropertyChanged("TextItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FormulariumText")]
	public partial class FormulariumText : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FormulariumTextId;
		
		private int _FormulariumId;
		
		private int _TextItemId;
		
		private EntityRef<Formularium> _Formularium;
		
		private EntityRef<TextItem> _TextItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormulariumTextIdChanging(int value);
    partial void OnFormulariumTextIdChanged();
    partial void OnFormulariumIdChanging(int value);
    partial void OnFormulariumIdChanged();
    partial void OnTextItemIdChanging(int value);
    partial void OnTextItemIdChanged();
    #endregion
		
		public FormulariumText()
		{
			this._Formularium = default(EntityRef<Formularium>);
			this._TextItem = default(EntityRef<TextItem>);
			OnCreated();
		}
		
		[Column(Storage="_FormulariumTextId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FormulariumTextId
		{
			get
			{
				return this._FormulariumTextId;
			}
			set
			{
				if ((this._FormulariumTextId != value))
				{
					this.OnFormulariumTextIdChanging(value);
					this.SendPropertyChanging();
					this._FormulariumTextId = value;
					this.SendPropertyChanged("FormulariumTextId");
					this.OnFormulariumTextIdChanged();
				}
			}
		}
		
		[Column(Storage="_FormulariumId", DbType="Int NOT NULL")]
		public int FormulariumId
		{
			get
			{
				return this._FormulariumId;
			}
			set
			{
				if ((this._FormulariumId != value))
				{
					if (this._Formularium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormulariumIdChanging(value);
					this.SendPropertyChanging();
					this._FormulariumId = value;
					this.SendPropertyChanged("FormulariumId");
					this.OnFormulariumIdChanged();
				}
			}
		}
		
		[Column(Storage="_TextItemId", DbType="Int NOT NULL")]
		public int TextItemId
		{
			get
			{
				return this._TextItemId;
			}
			set
			{
				if ((this._TextItemId != value))
				{
					if (this._TextItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextItemIdChanging(value);
					this.SendPropertyChanging();
					this._TextItemId = value;
					this.SendPropertyChanged("TextItemId");
					this.OnTextItemIdChanged();
				}
			}
		}
		
		[Association(Name="Formularium_FormulariumText", Storage="_Formularium", ThisKey="FormulariumId", OtherKey="FormulariumId", IsForeignKey=true)]
		public Formularium Formularium
		{
			get
			{
				return this._Formularium.Entity;
			}
			set
			{
				Formularium previousValue = this._Formularium.Entity;
				if (((previousValue != value) 
							|| (this._Formularium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formularium.Entity = null;
						previousValue.FormulariumText.Remove(this);
					}
					this._Formularium.Entity = value;
					if ((value != null))
					{
						value.FormulariumText.Add(this);
						this._FormulariumId = value.FormulariumId;
					}
					else
					{
						this._FormulariumId = default(int);
					}
					this.SendPropertyChanged("Formularium");
				}
			}
		}
		
		[Association(Name="TextItem_FormulariumText", Storage="_TextItem", ThisKey="TextItemId", OtherKey="TextItemId", IsForeignKey=true)]
		public TextItem TextItem
		{
			get
			{
				return this._TextItem.Entity;
			}
			set
			{
				TextItem previousValue = this._TextItem.Entity;
				if (((previousValue != value) 
							|| (this._TextItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TextItem.Entity = null;
						previousValue.FormulariumText.Remove(this);
					}
					this._TextItem.Entity = value;
					if ((value != null))
					{
						value.FormulariumText.Add(this);
						this._TextItemId = value.TextItemId;
					}
					else
					{
						this._TextItemId = default(int);
					}
					this.SendPropertyChanged("TextItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.GenFormUser")]
	public partial class GenFormUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _Email;
		
		private System.Data.Linq.Binary _VersionTimeStamp;
		
		private string _PassWord;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _PagerNumber;
		
		private EntitySet<Pharmacist> _Pharmacist;
		
		private EntitySet<TextLog> _TextLog;
		
		private EntitySet<UserRole> _UserRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnVersionTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnVersionTimeStampChanged();
    partial void OnPassWordChanging(string value);
    partial void OnPassWordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPagerNumberChanging(string value);
    partial void OnPagerNumberChanged();
    #endregion
		
		public GenFormUser()
		{
			this._Pharmacist = new EntitySet<Pharmacist>(new Action<Pharmacist>(this.attach_Pharmacist), new Action<Pharmacist>(this.detach_Pharmacist));
			this._TextLog = new EntitySet<TextLog>(new Action<TextLog>(this.attach_TextLog), new Action<TextLog>(this.detach_TextLog));
			this._UserRole = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRole), new Action<UserRole>(this.detach_UserRole));
			OnCreated();
		}
		
		[Column(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_VersionTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionTimeStamp
		{
			get
			{
				return this._VersionTimeStamp;
			}
			set
			{
				if ((this._VersionTimeStamp != value))
				{
					this.OnVersionTimeStampChanging(value);
					this.SendPropertyChanging();
					this._VersionTimeStamp = value;
					this.SendPropertyChanged("VersionTimeStamp");
					this.OnVersionTimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_PassWord", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PassWord
		{
			get
			{
				return this._PassWord;
			}
			set
			{
				if ((this._PassWord != value))
				{
					this.OnPassWordChanging(value);
					this.SendPropertyChanging();
					this._PassWord = value;
					this.SendPropertyChanged("PassWord");
					this.OnPassWordChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(125)", UpdateCheck=UpdateCheck.Never)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(125)", UpdateCheck=UpdateCheck.Never)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_PagerNumber", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string PagerNumber
		{
			get
			{
				return this._PagerNumber;
			}
			set
			{
				if ((this._PagerNumber != value))
				{
					this.OnPagerNumberChanging(value);
					this.SendPropertyChanging();
					this._PagerNumber = value;
					this.SendPropertyChanged("PagerNumber");
					this.OnPagerNumberChanged();
				}
			}
		}
		
		[Association(Name="GenFormUser_Pharmacist", Storage="_Pharmacist", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Pharmacist> Pharmacist
		{
			get
			{
				return this._Pharmacist;
			}
			set
			{
				this._Pharmacist.Assign(value);
			}
		}
		
		[Association(Name="GenFormUser_TextLog", Storage="_TextLog", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<TextLog> TextLog
		{
			get
			{
				return this._TextLog;
			}
			set
			{
				this._TextLog.Assign(value);
			}
		}
		
		[Association(Name="GenFormUser_UserRole", Storage="_UserRole", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserRole> UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				this._UserRole.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pharmacist(Pharmacist entity)
		{
			this.SendPropertyChanging();
			entity.GenFormUser = this;
		}
		
		private void detach_Pharmacist(Pharmacist entity)
		{
			this.SendPropertyChanging();
			entity.GenFormUser = null;
		}
		
		private void attach_TextLog(TextLog entity)
		{
			this.SendPropertyChanging();
			entity.GenFormUser = this;
		}
		
		private void detach_TextLog(TextLog entity)
		{
			this.SendPropertyChanging();
			entity.GenFormUser = null;
		}
		
		private void attach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.GenFormUser = this;
		}
		
		private void detach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.GenFormUser = null;
		}
	}
	
	[Table(Name="dbo.Indication")]
	public partial class Indication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndicationId;
		
		private string _IndicationText;
		
		private EntitySet<SubstanceDosingAdvice> _SubstanceDosingAdvice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndicationIdChanging(int value);
    partial void OnIndicationIdChanged();
    partial void OnIndicationTextChanging(string value);
    partial void OnIndicationTextChanged();
    #endregion
		
		public Indication()
		{
			this._SubstanceDosingAdvice = new EntitySet<SubstanceDosingAdvice>(new Action<SubstanceDosingAdvice>(this.attach_SubstanceDosingAdvice), new Action<SubstanceDosingAdvice>(this.detach_SubstanceDosingAdvice));
			OnCreated();
		}
		
		[Column(Storage="_IndicationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IndicationId
		{
			get
			{
				return this._IndicationId;
			}
			set
			{
				if ((this._IndicationId != value))
				{
					this.OnIndicationIdChanging(value);
					this.SendPropertyChanging();
					this._IndicationId = value;
					this.SendPropertyChanged("IndicationId");
					this.OnIndicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_IndicationText", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string IndicationText
		{
			get
			{
				return this._IndicationText;
			}
			set
			{
				if ((this._IndicationText != value))
				{
					this.OnIndicationTextChanging(value);
					this.SendPropertyChanging();
					this._IndicationText = value;
					this.SendPropertyChanged("IndicationText");
					this.OnIndicationTextChanged();
				}
			}
		}
		
		[Association(Name="Indication_SubstanceDosingAdvice", Storage="_SubstanceDosingAdvice", ThisKey="IndicationId", OtherKey="IndicationId")]
		public EntitySet<SubstanceDosingAdvice> SubstanceDosingAdvice
		{
			get
			{
				return this._SubstanceDosingAdvice;
			}
			set
			{
				this._SubstanceDosingAdvice.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubstanceDosingAdvice(SubstanceDosingAdvice entity)
		{
			this.SendPropertyChanging();
			entity.Indication = this;
		}
		
		private void detach_SubstanceDosingAdvice(SubstanceDosingAdvice entity)
		{
			this.SendPropertyChanging();
			entity.Indication = null;
		}
	}
	
	[Table(Name="dbo.Package")]
	public partial class Package : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PackageId;
		
		private string _PackageName;
		
		private System.Data.Linq.Binary _VersionTimeStamp;
		
		private EntitySet<Product> _Product;
		
		private EntitySet<ShapePackage> _ShapePackage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPackageIdChanging(int value);
    partial void OnPackageIdChanged();
    partial void OnPackageNameChanging(string value);
    partial void OnPackageNameChanged();
    partial void OnVersionTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnVersionTimeStampChanged();
    #endregion
		
		public Package()
		{
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			this._ShapePackage = new EntitySet<ShapePackage>(new Action<ShapePackage>(this.attach_ShapePackage), new Action<ShapePackage>(this.detach_ShapePackage));
			OnCreated();
		}
		
		[Column(Storage="_PackageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int PackageId
		{
			get
			{
				return this._PackageId;
			}
			set
			{
				if ((this._PackageId != value))
				{
					this.OnPackageIdChanging(value);
					this.SendPropertyChanging();
					this._PackageId = value;
					this.SendPropertyChanged("PackageId");
					this.OnPackageIdChanged();
				}
			}
		}
		
		[Column(Storage="_PackageName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PackageName
		{
			get
			{
				return this._PackageName;
			}
			set
			{
				if ((this._PackageName != value))
				{
					this.OnPackageNameChanging(value);
					this.SendPropertyChanging();
					this._PackageName = value;
					this.SendPropertyChanged("PackageName");
					this.OnPackageNameChanged();
				}
			}
		}
		
		[Column(Storage="_VersionTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionTimeStamp
		{
			get
			{
				return this._VersionTimeStamp;
			}
			set
			{
				if ((this._VersionTimeStamp != value))
				{
					this.OnVersionTimeStampChanging(value);
					this.SendPropertyChanging();
					this._VersionTimeStamp = value;
					this.SendPropertyChanged("VersionTimeStamp");
					this.OnVersionTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Package_Product", Storage="_Product", ThisKey="PackageId", OtherKey="PackageId")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		[Association(Name="Package_ShapePackage", Storage="_ShapePackage", ThisKey="PackageId", OtherKey="PackageId")]
		public EntitySet<ShapePackage> ShapePackage
		{
			get
			{
				return this._ShapePackage;
			}
			set
			{
				this._ShapePackage.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}
		
		private void attach_ShapePackage(ShapePackage entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}
		
		private void detach_ShapePackage(ShapePackage entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}
	}
	
	[Table(Name="dbo.Pharmacist")]
	public partial class Pharmacist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PharmacistId;
		
		private int _UserId;
		
		private int _PharmacyId;
		
		private EntitySet<Formularium> _Formularium;
		
		private EntitySet<FormulariumPharmacist> _FormulariumPharmacist;
		
		private EntityRef<GenFormUser> _GenFormUser;
		
		private EntityRef<Pharmacy> _Pharmacy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPharmacistIdChanging(int value);
    partial void OnPharmacistIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPharmacyIdChanging(int value);
    partial void OnPharmacyIdChanged();
    #endregion
		
		public Pharmacist()
		{
			this._Formularium = new EntitySet<Formularium>(new Action<Formularium>(this.attach_Formularium), new Action<Formularium>(this.detach_Formularium));
			this._FormulariumPharmacist = new EntitySet<FormulariumPharmacist>(new Action<FormulariumPharmacist>(this.attach_FormulariumPharmacist), new Action<FormulariumPharmacist>(this.detach_FormulariumPharmacist));
			this._GenFormUser = default(EntityRef<GenFormUser>);
			this._Pharmacy = default(EntityRef<Pharmacy>);
			OnCreated();
		}
		
		[Column(Storage="_PharmacistId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PharmacistId
		{
			get
			{
				return this._PharmacistId;
			}
			set
			{
				if ((this._PharmacistId != value))
				{
					this.OnPharmacistIdChanging(value);
					this.SendPropertyChanging();
					this._PharmacistId = value;
					this.SendPropertyChanged("PharmacistId");
					this.OnPharmacistIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._GenFormUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_PharmacyId", DbType="Int NOT NULL")]
		public int PharmacyId
		{
			get
			{
				return this._PharmacyId;
			}
			set
			{
				if ((this._PharmacyId != value))
				{
					if (this._Pharmacy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPharmacyIdChanging(value);
					this.SendPropertyChanging();
					this._PharmacyId = value;
					this.SendPropertyChanged("PharmacyId");
					this.OnPharmacyIdChanged();
				}
			}
		}
		
		[Association(Name="Pharmacist_Formularium", Storage="_Formularium", ThisKey="PharmacistId", OtherKey="PharmacistId")]
		public EntitySet<Formularium> Formularium
		{
			get
			{
				return this._Formularium;
			}
			set
			{
				this._Formularium.Assign(value);
			}
		}
		
		[Association(Name="Pharmacist_FormulariumPharmacist", Storage="_FormulariumPharmacist", ThisKey="PharmacistId", OtherKey="PharmacistId")]
		public EntitySet<FormulariumPharmacist> FormulariumPharmacist
		{
			get
			{
				return this._FormulariumPharmacist;
			}
			set
			{
				this._FormulariumPharmacist.Assign(value);
			}
		}
		
		[Association(Name="GenFormUser_Pharmacist", Storage="_GenFormUser", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public GenFormUser GenFormUser
		{
			get
			{
				return this._GenFormUser.Entity;
			}
			set
			{
				GenFormUser previousValue = this._GenFormUser.Entity;
				if (((previousValue != value) 
							|| (this._GenFormUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GenFormUser.Entity = null;
						previousValue.Pharmacist.Remove(this);
					}
					this._GenFormUser.Entity = value;
					if ((value != null))
					{
						value.Pharmacist.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("GenFormUser");
				}
			}
		}
		
		[Association(Name="Pharmacy_Pharmacist", Storage="_Pharmacy", ThisKey="PharmacyId", OtherKey="PharmacyId", IsForeignKey=true)]
		public Pharmacy Pharmacy
		{
			get
			{
				return this._Pharmacy.Entity;
			}
			set
			{
				Pharmacy previousValue = this._Pharmacy.Entity;
				if (((previousValue != value) 
							|| (this._Pharmacy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pharmacy.Entity = null;
						previousValue.Pharmacist.Remove(this);
					}
					this._Pharmacy.Entity = value;
					if ((value != null))
					{
						value.Pharmacist.Add(this);
						this._PharmacyId = value.PharmacyId;
					}
					else
					{
						this._PharmacyId = default(int);
					}
					this.SendPropertyChanged("Pharmacy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Formularium(Formularium entity)
		{
			this.SendPropertyChanging();
			entity.Pharmacist = this;
		}
		
		private void detach_Formularium(Formularium entity)
		{
			this.SendPropertyChanging();
			entity.Pharmacist = null;
		}
		
		private void attach_FormulariumPharmacist(FormulariumPharmacist entity)
		{
			this.SendPropertyChanging();
			entity.Pharmacist = this;
		}
		
		private void detach_FormulariumPharmacist(FormulariumPharmacist entity)
		{
			this.SendPropertyChanging();
			entity.Pharmacist = null;
		}
	}
	
	[Table(Name="dbo.Pharmacy")]
	public partial class Pharmacy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PharmacyId;
		
		private string _PharmacyName;
		
		private System.Data.Linq.Binary _VersionTimeStamp;
		
		private EntitySet<Pharmacist> _Pharmacist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPharmacyIdChanging(int value);
    partial void OnPharmacyIdChanged();
    partial void OnPharmacyNameChanging(string value);
    partial void OnPharmacyNameChanged();
    partial void OnVersionTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnVersionTimeStampChanged();
    #endregion
		
		public Pharmacy()
		{
			this._Pharmacist = new EntitySet<Pharmacist>(new Action<Pharmacist>(this.attach_Pharmacist), new Action<Pharmacist>(this.detach_Pharmacist));
			OnCreated();
		}
		
		[Column(Storage="_PharmacyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int PharmacyId
		{
			get
			{
				return this._PharmacyId;
			}
			set
			{
				if ((this._PharmacyId != value))
				{
					this.OnPharmacyIdChanging(value);
					this.SendPropertyChanging();
					this._PharmacyId = value;
					this.SendPropertyChanged("PharmacyId");
					this.OnPharmacyIdChanged();
				}
			}
		}
		
		[Column(Storage="_PharmacyName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PharmacyName
		{
			get
			{
				return this._PharmacyName;
			}
			set
			{
				if ((this._PharmacyName != value))
				{
					this.OnPharmacyNameChanging(value);
					this.SendPropertyChanging();
					this._PharmacyName = value;
					this.SendPropertyChanged("PharmacyName");
					this.OnPharmacyNameChanged();
				}
			}
		}
		
		[Column(Storage="_VersionTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionTimeStamp
		{
			get
			{
				return this._VersionTimeStamp;
			}
			set
			{
				if ((this._VersionTimeStamp != value))
				{
					this.OnVersionTimeStampChanging(value);
					this.SendPropertyChanging();
					this._VersionTimeStamp = value;
					this.SendPropertyChanged("VersionTimeStamp");
					this.OnVersionTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Pharmacy_Pharmacist", Storage="_Pharmacist", ThisKey="PharmacyId", OtherKey="PharmacyId")]
		public EntitySet<Pharmacist> Pharmacist
		{
			get
			{
				return this._Pharmacist;
			}
			set
			{
				this._Pharmacist.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pharmacist(Pharmacist entity)
		{
			this.SendPropertyChanging();
			entity.Pharmacy = this;
		}
		
		private void detach_Pharmacist(Pharmacist entity)
		{
			this.SendPropertyChanging();
			entity.Pharmacy = null;
		}
	}
	
	[Table(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private string _DisplayName;
		
		private System.Data.Linq.Binary _VersionTimeStamp;
		
		private int _ShapeId;
		
		private int _PackageId;
		
		private int _GenericId;
		
		private int _UnitId;
		
		private string _ProductName;
		
		private string _ProductKey;
		
		private System.Nullable<decimal> _ProductQuantity;
		
		private string _TradeProductCode;
		
		private string _ProductCode;
		
		private System.Nullable<int> _Divisor;
		
		private System.Nullable<int> _BrandId;
		
		private EntitySet<DosingAdviceProduct> _DosingAdviceProduct;
		
		private EntitySet<ProductCombination> _ProductCombination;
		
		private EntitySet<ProductCombination> _ProductCombination1;
		
		private EntitySet<ProductFormulariumText> _ProductFormulariumText;
		
		private EntitySet<ProductRoute> _ProductRoute;
		
		private EntitySet<ProductSubstance> _ProductSubstance;
		
		private EntityRef<Package> _Package;
		
		private EntityRef<Brand> _Brand;
		
		private EntityRef<Shape> _Shape;
		
		private EntityRef<Substance> _Substance;
		
		private EntityRef<Unit> _Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnVersionTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnVersionTimeStampChanged();
    partial void OnShapeIdChanging(int value);
    partial void OnShapeIdChanged();
    partial void OnPackageIdChanging(int value);
    partial void OnPackageIdChanged();
    partial void OnGenericIdChanging(int value);
    partial void OnGenericIdChanged();
    partial void OnUnitIdChanging(int value);
    partial void OnUnitIdChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnProductKeyChanging(string value);
    partial void OnProductKeyChanged();
    partial void OnProductQuantityChanging(System.Nullable<decimal> value);
    partial void OnProductQuantityChanged();
    partial void OnTradeProductCodeChanging(string value);
    partial void OnTradeProductCodeChanged();
    partial void OnProductCodeChanging(string value);
    partial void OnProductCodeChanged();
    partial void OnDivisorChanging(System.Nullable<int> value);
    partial void OnDivisorChanged();
    partial void OnBrandIdChanging(System.Nullable<int> value);
    partial void OnBrandIdChanged();
    #endregion
		
		public Product()
		{
			this._DosingAdviceProduct = new EntitySet<DosingAdviceProduct>(new Action<DosingAdviceProduct>(this.attach_DosingAdviceProduct), new Action<DosingAdviceProduct>(this.detach_DosingAdviceProduct));
			this._ProductCombination = new EntitySet<ProductCombination>(new Action<ProductCombination>(this.attach_ProductCombination), new Action<ProductCombination>(this.detach_ProductCombination));
			this._ProductCombination1 = new EntitySet<ProductCombination>(new Action<ProductCombination>(this.attach_ProductCombination1), new Action<ProductCombination>(this.detach_ProductCombination1));
			this._ProductFormulariumText = new EntitySet<ProductFormulariumText>(new Action<ProductFormulariumText>(this.attach_ProductFormulariumText), new Action<ProductFormulariumText>(this.detach_ProductFormulariumText));
			this._ProductRoute = new EntitySet<ProductRoute>(new Action<ProductRoute>(this.attach_ProductRoute), new Action<ProductRoute>(this.detach_ProductRoute));
			this._ProductSubstance = new EntitySet<ProductSubstance>(new Action<ProductSubstance>(this.attach_ProductSubstance), new Action<ProductSubstance>(this.detach_ProductSubstance));
			this._Package = default(EntityRef<Package>);
			this._Brand = default(EntityRef<Brand>);
			this._Shape = default(EntityRef<Shape>);
			this._Substance = default(EntityRef<Substance>);
			this._Unit = default(EntityRef<Unit>);
			OnCreated();
		}
		
		[Column(Storage="_ProductId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[Column(Storage="_VersionTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionTimeStamp
		{
			get
			{
				return this._VersionTimeStamp;
			}
			set
			{
				if ((this._VersionTimeStamp != value))
				{
					this.OnVersionTimeStampChanging(value);
					this.SendPropertyChanging();
					this._VersionTimeStamp = value;
					this.SendPropertyChanged("VersionTimeStamp");
					this.OnVersionTimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_ShapeId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ShapeId
		{
			get
			{
				return this._ShapeId;
			}
			set
			{
				if ((this._ShapeId != value))
				{
					if (this._Shape.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShapeIdChanging(value);
					this.SendPropertyChanging();
					this._ShapeId = value;
					this.SendPropertyChanged("ShapeId");
					this.OnShapeIdChanged();
				}
			}
		}
		
		[Column(Storage="_PackageId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PackageId
		{
			get
			{
				return this._PackageId;
			}
			set
			{
				if ((this._PackageId != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIdChanging(value);
					this.SendPropertyChanging();
					this._PackageId = value;
					this.SendPropertyChanged("PackageId");
					this.OnPackageIdChanged();
				}
			}
		}
		
		[Column(Storage="_GenericId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int GenericId
		{
			get
			{
				return this._GenericId;
			}
			set
			{
				if ((this._GenericId != value))
				{
					if (this._Substance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenericIdChanging(value);
					this.SendPropertyChanging();
					this._GenericId = value;
					this.SendPropertyChanged("GenericId");
					this.OnGenericIdChanged();
				}
			}
		}
		
		[Column(Storage="_UnitId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UnitId
		{
			get
			{
				return this._UnitId;
			}
			set
			{
				if ((this._UnitId != value))
				{
					if (this._Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIdChanging(value);
					this.SendPropertyChanging();
					this._UnitId = value;
					this.SendPropertyChanged("UnitId");
					this.OnUnitIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[Column(Storage="_ProductKey", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ProductKey
		{
			get
			{
				return this._ProductKey;
			}
			set
			{
				if ((this._ProductKey != value))
				{
					this.OnProductKeyChanging(value);
					this.SendPropertyChanging();
					this._ProductKey = value;
					this.SendPropertyChanged("ProductKey");
					this.OnProductKeyChanged();
				}
			}
		}
		
		[Column(Storage="_ProductQuantity", DbType="Decimal(38,12)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ProductQuantity
		{
			get
			{
				return this._ProductQuantity;
			}
			set
			{
				if ((this._ProductQuantity != value))
				{
					this.OnProductQuantityChanging(value);
					this.SendPropertyChanging();
					this._ProductQuantity = value;
					this.SendPropertyChanged("ProductQuantity");
					this.OnProductQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_TradeProductCode", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string TradeProductCode
		{
			get
			{
				return this._TradeProductCode;
			}
			set
			{
				if ((this._TradeProductCode != value))
				{
					this.OnTradeProductCodeChanging(value);
					this.SendPropertyChanging();
					this._TradeProductCode = value;
					this.SendPropertyChanged("TradeProductCode");
					this.OnTradeProductCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ProductCode", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ProductCode
		{
			get
			{
				return this._ProductCode;
			}
			set
			{
				if ((this._ProductCode != value))
				{
					this.OnProductCodeChanging(value);
					this.SendPropertyChanging();
					this._ProductCode = value;
					this.SendPropertyChanged("ProductCode");
					this.OnProductCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Divisor", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Divisor
		{
			get
			{
				return this._Divisor;
			}
			set
			{
				if ((this._Divisor != value))
				{
					this.OnDivisorChanging(value);
					this.SendPropertyChanging();
					this._Divisor = value;
					this.SendPropertyChanged("Divisor");
					this.OnDivisorChanged();
				}
			}
		}
		
		[Column(Storage="_BrandId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> BrandId
		{
			get
			{
				return this._BrandId;
			}
			set
			{
				if ((this._BrandId != value))
				{
					if (this._Brand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrandIdChanging(value);
					this.SendPropertyChanging();
					this._BrandId = value;
					this.SendPropertyChanged("BrandId");
					this.OnBrandIdChanged();
				}
			}
		}
		
		[Association(Name="Product_DosingAdviceProduct", Storage="_DosingAdviceProduct", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<DosingAdviceProduct> DosingAdviceProduct
		{
			get
			{
				return this._DosingAdviceProduct;
			}
			set
			{
				this._DosingAdviceProduct.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductCombination", Storage="_ProductCombination", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<ProductCombination> ProductCombination
		{
			get
			{
				return this._ProductCombination;
			}
			set
			{
				this._ProductCombination.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductCombination1", Storage="_ProductCombination1", ThisKey="ProductId", OtherKey="Component")]
		public EntitySet<ProductCombination> ProductCombination1
		{
			get
			{
				return this._ProductCombination1;
			}
			set
			{
				this._ProductCombination1.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductFormulariumText", Storage="_ProductFormulariumText", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<ProductFormulariumText> ProductFormulariumText
		{
			get
			{
				return this._ProductFormulariumText;
			}
			set
			{
				this._ProductFormulariumText.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductRoute", Storage="_ProductRoute", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<ProductRoute> ProductRoute
		{
			get
			{
				return this._ProductRoute;
			}
			set
			{
				this._ProductRoute.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductSubstance", Storage="_ProductSubstance", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<ProductSubstance> ProductSubstance
		{
			get
			{
				return this._ProductSubstance;
			}
			set
			{
				this._ProductSubstance.Assign(value);
			}
		}
		
		[Association(Name="Package_Product", Storage="_Package", ThisKey="PackageId", OtherKey="PackageId", IsForeignKey=true)]
		public Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				Package previousValue = this._Package.Entity;
				if (((previousValue != value) 
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._PackageId = value.PackageId;
					}
					else
					{
						this._PackageId = default(int);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}
		
		[Association(Name="Brand_Product", Storage="_Brand", ThisKey="BrandId", OtherKey="BrandId", IsForeignKey=true)]
		public Brand Brand
		{
			get
			{
				return this._Brand.Entity;
			}
			set
			{
				Brand previousValue = this._Brand.Entity;
				if (((previousValue != value) 
							|| (this._Brand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Brand.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._Brand.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._BrandId = value.BrandId;
					}
					else
					{
						this._BrandId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Brand");
				}
			}
		}
		
		[Association(Name="Shape_Product", Storage="_Shape", ThisKey="ShapeId", OtherKey="ShapeId", IsForeignKey=true)]
		public Shape Shape
		{
			get
			{
				return this._Shape.Entity;
			}
			set
			{
				Shape previousValue = this._Shape.Entity;
				if (((previousValue != value) 
							|| (this._Shape.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shape.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._Shape.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._ShapeId = value.ShapeId;
					}
					else
					{
						this._ShapeId = default(int);
					}
					this.SendPropertyChanged("Shape");
				}
			}
		}
		
		[Association(Name="Substance_Product", Storage="_Substance", ThisKey="GenericId", OtherKey="SubstanceId", IsForeignKey=true)]
		public Substance Substance
		{
			get
			{
				return this._Substance.Entity;
			}
			set
			{
				Substance previousValue = this._Substance.Entity;
				if (((previousValue != value) 
							|| (this._Substance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Substance.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._Substance.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._GenericId = value.SubstanceId;
					}
					else
					{
						this._GenericId = default(int);
					}
					this.SendPropertyChanged("Substance");
				}
			}
		}
		
		[Association(Name="Unit_Product", Storage="_Unit", ThisKey="UnitId", OtherKey="UnitId", IsForeignKey=true)]
		public Unit Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				Unit previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._UnitId = value.UnitId;
					}
					else
					{
						this._UnitId = default(int);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DosingAdviceProduct(DosingAdviceProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_DosingAdviceProduct(DosingAdviceProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductCombination(ProductCombination entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductCombination(ProductCombination entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductCombination1(ProductCombination entity)
		{
			this.SendPropertyChanging();
			entity.Product1 = this;
		}
		
		private void detach_ProductCombination1(ProductCombination entity)
		{
			this.SendPropertyChanging();
			entity.Product1 = null;
		}
		
		private void attach_ProductFormulariumText(ProductFormulariumText entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductFormulariumText(ProductFormulariumText entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductRoute(ProductRoute entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductRoute(ProductRoute entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductSubstance(ProductSubstance entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductSubstance(ProductSubstance entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[Table(Name="dbo.ProductCombination")]
	public partial class ProductCombination : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductCombinationId;
		
		private int _ProductId;
		
		private int _Component;
		
		private string _ProductCombinationName;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Product> _Product1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductCombinationIdChanging(int value);
    partial void OnProductCombinationIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnComponentChanging(int value);
    partial void OnComponentChanged();
    partial void OnProductCombinationNameChanging(string value);
    partial void OnProductCombinationNameChanged();
    #endregion
		
		public ProductCombination()
		{
			this._Product = default(EntityRef<Product>);
			this._Product1 = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_ProductCombinationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductCombinationId
		{
			get
			{
				return this._ProductCombinationId;
			}
			set
			{
				if ((this._ProductCombinationId != value))
				{
					this.OnProductCombinationIdChanging(value);
					this.SendPropertyChanging();
					this._ProductCombinationId = value;
					this.SendPropertyChanged("ProductCombinationId");
					this.OnProductCombinationIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_Component", DbType="Int NOT NULL")]
		public int Component
		{
			get
			{
				return this._Component;
			}
			set
			{
				if ((this._Component != value))
				{
					if (this._Product1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComponentChanging(value);
					this.SendPropertyChanging();
					this._Component = value;
					this.SendPropertyChanged("Component");
					this.OnComponentChanged();
				}
			}
		}
		
		[Column(Storage="_ProductCombinationName", DbType="NVarChar(255)")]
		public string ProductCombinationName
		{
			get
			{
				return this._ProductCombinationName;
			}
			set
			{
				if ((this._ProductCombinationName != value))
				{
					this.OnProductCombinationNameChanging(value);
					this.SendPropertyChanging();
					this._ProductCombinationName = value;
					this.SendPropertyChanged("ProductCombinationName");
					this.OnProductCombinationNameChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductCombination", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductCombination.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductCombination.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Product_ProductCombination1", Storage="_Product1", ThisKey="Component", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product1
		{
			get
			{
				return this._Product1.Entity;
			}
			set
			{
				Product previousValue = this._Product1.Entity;
				if (((previousValue != value) 
							|| (this._Product1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product1.Entity = null;
						previousValue.ProductCombination1.Remove(this);
					}
					this._Product1.Entity = value;
					if ((value != null))
					{
						value.ProductCombination1.Add(this);
						this._Component = value.ProductId;
					}
					else
					{
						this._Component = default(int);
					}
					this.SendPropertyChanged("Product1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProductFormulariumText")]
	public partial class ProductFormulariumText : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductFormulariumTextId;
		
		private int _ProductId;
		
		private int _FormulariumId;
		
		private int _TextItemId;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Formularium> _Formularium;
		
		private EntityRef<TextItem> _TextItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductFormulariumTextIdChanging(int value);
    partial void OnProductFormulariumTextIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnFormulariumIdChanging(int value);
    partial void OnFormulariumIdChanged();
    partial void OnTextItemIdChanging(int value);
    partial void OnTextItemIdChanged();
    #endregion
		
		public ProductFormulariumText()
		{
			this._Product = default(EntityRef<Product>);
			this._Formularium = default(EntityRef<Formularium>);
			this._TextItem = default(EntityRef<TextItem>);
			OnCreated();
		}
		
		[Column(Storage="_ProductFormulariumTextId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductFormulariumTextId
		{
			get
			{
				return this._ProductFormulariumTextId;
			}
			set
			{
				if ((this._ProductFormulariumTextId != value))
				{
					this.OnProductFormulariumTextIdChanging(value);
					this.SendPropertyChanging();
					this._ProductFormulariumTextId = value;
					this.SendPropertyChanged("ProductFormulariumTextId");
					this.OnProductFormulariumTextIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_FormulariumId", DbType="Int NOT NULL")]
		public int FormulariumId
		{
			get
			{
				return this._FormulariumId;
			}
			set
			{
				if ((this._FormulariumId != value))
				{
					if (this._Formularium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormulariumIdChanging(value);
					this.SendPropertyChanging();
					this._FormulariumId = value;
					this.SendPropertyChanged("FormulariumId");
					this.OnFormulariumIdChanged();
				}
			}
		}
		
		[Column(Storage="_TextItemId", DbType="Int NOT NULL")]
		public int TextItemId
		{
			get
			{
				return this._TextItemId;
			}
			set
			{
				if ((this._TextItemId != value))
				{
					if (this._TextItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextItemIdChanging(value);
					this.SendPropertyChanging();
					this._TextItemId = value;
					this.SendPropertyChanged("TextItemId");
					this.OnTextItemIdChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductFormulariumText", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductFormulariumText.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductFormulariumText.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Formularium_ProductFormulariumText", Storage="_Formularium", ThisKey="FormulariumId", OtherKey="FormulariumId", IsForeignKey=true)]
		public Formularium Formularium
		{
			get
			{
				return this._Formularium.Entity;
			}
			set
			{
				Formularium previousValue = this._Formularium.Entity;
				if (((previousValue != value) 
							|| (this._Formularium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formularium.Entity = null;
						previousValue.ProductFormulariumText.Remove(this);
					}
					this._Formularium.Entity = value;
					if ((value != null))
					{
						value.ProductFormulariumText.Add(this);
						this._FormulariumId = value.FormulariumId;
					}
					else
					{
						this._FormulariumId = default(int);
					}
					this.SendPropertyChanged("Formularium");
				}
			}
		}
		
		[Association(Name="TextItem_ProductFormulariumText", Storage="_TextItem", ThisKey="TextItemId", OtherKey="TextItemId", IsForeignKey=true)]
		public TextItem TextItem
		{
			get
			{
				return this._TextItem.Entity;
			}
			set
			{
				TextItem previousValue = this._TextItem.Entity;
				if (((previousValue != value) 
							|| (this._TextItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TextItem.Entity = null;
						previousValue.ProductFormulariumText.Remove(this);
					}
					this._TextItem.Entity = value;
					if ((value != null))
					{
						value.ProductFormulariumText.Add(this);
						this._TextItemId = value.TextItemId;
					}
					else
					{
						this._TextItemId = default(int);
					}
					this.SendPropertyChanged("TextItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProductRoute")]
	public partial class ProductRoute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductRouteId;
		
		private int _ProductId;
		
		private int _RouteId;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Route> _Route;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductRouteIdChanging(int value);
    partial void OnProductRouteIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnRouteIdChanging(int value);
    partial void OnRouteIdChanged();
    #endregion
		
		public ProductRoute()
		{
			this._Product = default(EntityRef<Product>);
			this._Route = default(EntityRef<Route>);
			OnCreated();
		}
		
		[Column(Storage="_ProductRouteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductRouteId
		{
			get
			{
				return this._ProductRouteId;
			}
			set
			{
				if ((this._ProductRouteId != value))
				{
					this.OnProductRouteIdChanging(value);
					this.SendPropertyChanging();
					this._ProductRouteId = value;
					this.SendPropertyChanged("ProductRouteId");
					this.OnProductRouteIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_RouteId", DbType="Int NOT NULL")]
		public int RouteId
		{
			get
			{
				return this._RouteId;
			}
			set
			{
				if ((this._RouteId != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteIdChanging(value);
					this.SendPropertyChanging();
					this._RouteId = value;
					this.SendPropertyChanged("RouteId");
					this.OnRouteIdChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductRoute", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductRoute.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductRoute.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Route_ProductRoute", Storage="_Route", ThisKey="RouteId", OtherKey="RouteId", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.ProductRoute.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.ProductRoute.Add(this);
						this._RouteId = value.RouteId;
					}
					else
					{
						this._RouteId = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProductSubstance")]
	public partial class ProductSubstance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductSubstanceId;
		
		private int _ProductId;
		
		private int _SubstanceId;
		
		private int _SubstanceOrdering;
		
		private System.Nullable<decimal> _Concentration;
		
		private System.Nullable<decimal> _SubstanceQuantity;
		
		private System.Nullable<int> _UnitId;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Substance> _Substance;
		
		private EntityRef<Unit> _Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductSubstanceIdChanging(int value);
    partial void OnProductSubstanceIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnSubstanceIdChanging(int value);
    partial void OnSubstanceIdChanged();
    partial void OnSubstanceOrderingChanging(int value);
    partial void OnSubstanceOrderingChanged();
    partial void OnConcentrationChanging(System.Nullable<decimal> value);
    partial void OnConcentrationChanged();
    partial void OnSubstanceQuantityChanging(System.Nullable<decimal> value);
    partial void OnSubstanceQuantityChanged();
    partial void OnUnitIdChanging(System.Nullable<int> value);
    partial void OnUnitIdChanged();
    #endregion
		
		public ProductSubstance()
		{
			this._Product = default(EntityRef<Product>);
			this._Substance = default(EntityRef<Substance>);
			this._Unit = default(EntityRef<Unit>);
			OnCreated();
		}
		
		[Column(Storage="_ProductSubstanceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductSubstanceId
		{
			get
			{
				return this._ProductSubstanceId;
			}
			set
			{
				if ((this._ProductSubstanceId != value))
				{
					this.OnProductSubstanceIdChanging(value);
					this.SendPropertyChanging();
					this._ProductSubstanceId = value;
					this.SendPropertyChanged("ProductSubstanceId");
					this.OnProductSubstanceIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubstanceId", DbType="Int NOT NULL")]
		public int SubstanceId
		{
			get
			{
				return this._SubstanceId;
			}
			set
			{
				if ((this._SubstanceId != value))
				{
					if (this._Substance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstanceIdChanging(value);
					this.SendPropertyChanging();
					this._SubstanceId = value;
					this.SendPropertyChanged("SubstanceId");
					this.OnSubstanceIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubstanceOrdering", DbType="Int NOT NULL")]
		public int SubstanceOrdering
		{
			get
			{
				return this._SubstanceOrdering;
			}
			set
			{
				if ((this._SubstanceOrdering != value))
				{
					this.OnSubstanceOrderingChanging(value);
					this.SendPropertyChanging();
					this._SubstanceOrdering = value;
					this.SendPropertyChanged("SubstanceOrdering");
					this.OnSubstanceOrderingChanged();
				}
			}
		}
		
		[Column(Storage="_Concentration", DbType="Decimal(38,19)")]
		public System.Nullable<decimal> Concentration
		{
			get
			{
				return this._Concentration;
			}
			set
			{
				if ((this._Concentration != value))
				{
					this.OnConcentrationChanging(value);
					this.SendPropertyChanging();
					this._Concentration = value;
					this.SendPropertyChanged("Concentration");
					this.OnConcentrationChanged();
				}
			}
		}
		
		[Column(Storage="_SubstanceQuantity", DbType="Decimal(38,16)")]
		public System.Nullable<decimal> SubstanceQuantity
		{
			get
			{
				return this._SubstanceQuantity;
			}
			set
			{
				if ((this._SubstanceQuantity != value))
				{
					this.OnSubstanceQuantityChanging(value);
					this.SendPropertyChanging();
					this._SubstanceQuantity = value;
					this.SendPropertyChanged("SubstanceQuantity");
					this.OnSubstanceQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_UnitId", DbType="Int")]
		public System.Nullable<int> UnitId
		{
			get
			{
				return this._UnitId;
			}
			set
			{
				if ((this._UnitId != value))
				{
					if (this._Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIdChanging(value);
					this.SendPropertyChanging();
					this._UnitId = value;
					this.SendPropertyChanged("UnitId");
					this.OnUnitIdChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductSubstance", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductSubstance.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductSubstance.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Substance_ProductSubstance", Storage="_Substance", ThisKey="SubstanceId", OtherKey="SubstanceId", IsForeignKey=true)]
		public Substance Substance
		{
			get
			{
				return this._Substance.Entity;
			}
			set
			{
				Substance previousValue = this._Substance.Entity;
				if (((previousValue != value) 
							|| (this._Substance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Substance.Entity = null;
						previousValue.ProductSubstance.Remove(this);
					}
					this._Substance.Entity = value;
					if ((value != null))
					{
						value.ProductSubstance.Add(this);
						this._SubstanceId = value.SubstanceId;
					}
					else
					{
						this._SubstanceId = default(int);
					}
					this.SendPropertyChanged("Substance");
				}
			}
		}
		
		[Association(Name="Unit_ProductSubstance", Storage="_Unit", ThisKey="UnitId", OtherKey="UnitId", IsForeignKey=true)]
		public Unit Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				Unit previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.ProductSubstance.Remove(this);
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.ProductSubstance.Add(this);
						this._UnitId = value.UnitId;
					}
					else
					{
						this._UnitId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _RoleName;
		
		private System.Data.Linq.Binary _VersionTimeStamp;
		
		private string _RoleDescription;
		
		private EntitySet<UserRole> _UserRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnVersionTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnVersionTimeStampChanged();
    partial void OnRoleDescriptionChanging(string value);
    partial void OnRoleDescriptionChanged();
    #endregion
		
		public Role()
		{
			this._UserRole = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRole), new Action<UserRole>(this.detach_UserRole));
			OnCreated();
		}
		
		[Column(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[Column(Storage="_VersionTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionTimeStamp
		{
			get
			{
				return this._VersionTimeStamp;
			}
			set
			{
				if ((this._VersionTimeStamp != value))
				{
					this.OnVersionTimeStampChanging(value);
					this.SendPropertyChanging();
					this._VersionTimeStamp = value;
					this.SendPropertyChanged("VersionTimeStamp");
					this.OnVersionTimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_RoleDescription", DbType="NVarChar(1000)", UpdateCheck=UpdateCheck.Never)]
		public string RoleDescription
		{
			get
			{
				return this._RoleDescription;
			}
			set
			{
				if ((this._RoleDescription != value))
				{
					this.OnRoleDescriptionChanging(value);
					this.SendPropertyChanging();
					this._RoleDescription = value;
					this.SendPropertyChanged("RoleDescription");
					this.OnRoleDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Role_UserRole", Storage="_UserRole", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<UserRole> UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				this._UserRole.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[Table(Name="dbo.Route")]
	public partial class Route : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RouteId;
		
		private string _RouteName;
		
		private System.Data.Linq.Binary _VersionTimeStamp;
		
		private string _RouteAbbreviation;
		
		private EntitySet<DosingAdviceRoute> _DosingAdviceRoute;
		
		private EntitySet<ProductRoute> _ProductRoute;
		
		private EntitySet<ShapeRoute> _ShapeRoute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRouteIdChanging(int value);
    partial void OnRouteIdChanged();
    partial void OnRouteNameChanging(string value);
    partial void OnRouteNameChanged();
    partial void OnVersionTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnVersionTimeStampChanged();
    partial void OnRouteAbbreviationChanging(string value);
    partial void OnRouteAbbreviationChanged();
    #endregion
		
		public Route()
		{
			this._DosingAdviceRoute = new EntitySet<DosingAdviceRoute>(new Action<DosingAdviceRoute>(this.attach_DosingAdviceRoute), new Action<DosingAdviceRoute>(this.detach_DosingAdviceRoute));
			this._ProductRoute = new EntitySet<ProductRoute>(new Action<ProductRoute>(this.attach_ProductRoute), new Action<ProductRoute>(this.detach_ProductRoute));
			this._ShapeRoute = new EntitySet<ShapeRoute>(new Action<ShapeRoute>(this.attach_ShapeRoute), new Action<ShapeRoute>(this.detach_ShapeRoute));
			OnCreated();
		}
		
		[Column(Storage="_RouteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int RouteId
		{
			get
			{
				return this._RouteId;
			}
			set
			{
				if ((this._RouteId != value))
				{
					this.OnRouteIdChanging(value);
					this.SendPropertyChanging();
					this._RouteId = value;
					this.SendPropertyChanged("RouteId");
					this.OnRouteIdChanged();
				}
			}
		}
		
		[Column(Storage="_RouteName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RouteName
		{
			get
			{
				return this._RouteName;
			}
			set
			{
				if ((this._RouteName != value))
				{
					this.OnRouteNameChanging(value);
					this.SendPropertyChanging();
					this._RouteName = value;
					this.SendPropertyChanged("RouteName");
					this.OnRouteNameChanged();
				}
			}
		}
		
		[Column(Storage="_VersionTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionTimeStamp
		{
			get
			{
				return this._VersionTimeStamp;
			}
			set
			{
				if ((this._VersionTimeStamp != value))
				{
					this.OnVersionTimeStampChanging(value);
					this.SendPropertyChanging();
					this._VersionTimeStamp = value;
					this.SendPropertyChanged("VersionTimeStamp");
					this.OnVersionTimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_RouteAbbreviation", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string RouteAbbreviation
		{
			get
			{
				return this._RouteAbbreviation;
			}
			set
			{
				if ((this._RouteAbbreviation != value))
				{
					this.OnRouteAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._RouteAbbreviation = value;
					this.SendPropertyChanged("RouteAbbreviation");
					this.OnRouteAbbreviationChanged();
				}
			}
		}
		
		[Association(Name="Route_DosingAdviceRoute", Storage="_DosingAdviceRoute", ThisKey="RouteId", OtherKey="RouteId")]
		public EntitySet<DosingAdviceRoute> DosingAdviceRoute
		{
			get
			{
				return this._DosingAdviceRoute;
			}
			set
			{
				this._DosingAdviceRoute.Assign(value);
			}
		}
		
		[Association(Name="Route_ProductRoute", Storage="_ProductRoute", ThisKey="RouteId", OtherKey="RouteId")]
		public EntitySet<ProductRoute> ProductRoute
		{
			get
			{
				return this._ProductRoute;
			}
			set
			{
				this._ProductRoute.Assign(value);
			}
		}
		
		[Association(Name="Route_ShapeRoute", Storage="_ShapeRoute", ThisKey="RouteId", OtherKey="RouteId")]
		public EntitySet<ShapeRoute> ShapeRoute
		{
			get
			{
				return this._ShapeRoute;
			}
			set
			{
				this._ShapeRoute.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DosingAdviceRoute(DosingAdviceRoute entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_DosingAdviceRoute(DosingAdviceRoute entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
		
		private void attach_ProductRoute(ProductRoute entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_ProductRoute(ProductRoute entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
		
		private void attach_ShapeRoute(ShapeRoute entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_ShapeRoute(ShapeRoute entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
	}
	
	[Table(Name="dbo.Shape")]
	public partial class Shape : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShapeId;
		
		private string _ShapeName;
		
		private System.Data.Linq.Binary _VersionTimeStamp;
		
		private EntitySet<Product> _Product;
		
		private EntitySet<ShapePackage> _ShapePackage;
		
		private EntitySet<ShapeRoute> _ShapeRoute;
		
		private EntitySet<ShapeUnit> _ShapeUnit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShapeIdChanging(int value);
    partial void OnShapeIdChanged();
    partial void OnShapeNameChanging(string value);
    partial void OnShapeNameChanged();
    partial void OnVersionTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnVersionTimeStampChanged();
    #endregion
		
		public Shape()
		{
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			this._ShapePackage = new EntitySet<ShapePackage>(new Action<ShapePackage>(this.attach_ShapePackage), new Action<ShapePackage>(this.detach_ShapePackage));
			this._ShapeRoute = new EntitySet<ShapeRoute>(new Action<ShapeRoute>(this.attach_ShapeRoute), new Action<ShapeRoute>(this.detach_ShapeRoute));
			this._ShapeUnit = new EntitySet<ShapeUnit>(new Action<ShapeUnit>(this.attach_ShapeUnit), new Action<ShapeUnit>(this.detach_ShapeUnit));
			OnCreated();
		}
		
		[Column(Storage="_ShapeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ShapeId
		{
			get
			{
				return this._ShapeId;
			}
			set
			{
				if ((this._ShapeId != value))
				{
					this.OnShapeIdChanging(value);
					this.SendPropertyChanging();
					this._ShapeId = value;
					this.SendPropertyChanged("ShapeId");
					this.OnShapeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ShapeName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ShapeName
		{
			get
			{
				return this._ShapeName;
			}
			set
			{
				if ((this._ShapeName != value))
				{
					this.OnShapeNameChanging(value);
					this.SendPropertyChanging();
					this._ShapeName = value;
					this.SendPropertyChanged("ShapeName");
					this.OnShapeNameChanged();
				}
			}
		}
		
		[Column(Storage="_VersionTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionTimeStamp
		{
			get
			{
				return this._VersionTimeStamp;
			}
			set
			{
				if ((this._VersionTimeStamp != value))
				{
					this.OnVersionTimeStampChanging(value);
					this.SendPropertyChanging();
					this._VersionTimeStamp = value;
					this.SendPropertyChanged("VersionTimeStamp");
					this.OnVersionTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Shape_Product", Storage="_Product", ThisKey="ShapeId", OtherKey="ShapeId")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		[Association(Name="Shape_ShapePackage", Storage="_ShapePackage", ThisKey="ShapeId", OtherKey="ShapeId")]
		public EntitySet<ShapePackage> ShapePackage
		{
			get
			{
				return this._ShapePackage;
			}
			set
			{
				this._ShapePackage.Assign(value);
			}
		}
		
		[Association(Name="Shape_ShapeRoute", Storage="_ShapeRoute", ThisKey="ShapeId", OtherKey="ShapeId")]
		public EntitySet<ShapeRoute> ShapeRoute
		{
			get
			{
				return this._ShapeRoute;
			}
			set
			{
				this._ShapeRoute.Assign(value);
			}
		}
		
		[Association(Name="Shape_ShapeUnit", Storage="_ShapeUnit", ThisKey="ShapeId", OtherKey="ShapeId")]
		public EntitySet<ShapeUnit> ShapeUnit
		{
			get
			{
				return this._ShapeUnit;
			}
			set
			{
				this._ShapeUnit.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Shape = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Shape = null;
		}
		
		private void attach_ShapePackage(ShapePackage entity)
		{
			this.SendPropertyChanging();
			entity.Shape = this;
		}
		
		private void detach_ShapePackage(ShapePackage entity)
		{
			this.SendPropertyChanging();
			entity.Shape = null;
		}
		
		private void attach_ShapeRoute(ShapeRoute entity)
		{
			this.SendPropertyChanging();
			entity.Shape = this;
		}
		
		private void detach_ShapeRoute(ShapeRoute entity)
		{
			this.SendPropertyChanging();
			entity.Shape = null;
		}
		
		private void attach_ShapeUnit(ShapeUnit entity)
		{
			this.SendPropertyChanging();
			entity.Shape = this;
		}
		
		private void detach_ShapeUnit(ShapeUnit entity)
		{
			this.SendPropertyChanging();
			entity.Shape = null;
		}
	}
	
	[Table(Name="dbo.ShapePackage")]
	public partial class ShapePackage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShapePackageId;
		
		private int _PackageId;
		
		private int _ShapeId;
		
		private EntityRef<Package> _Package;
		
		private EntityRef<Shape> _Shape;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShapePackageIdChanging(int value);
    partial void OnShapePackageIdChanged();
    partial void OnPackageIdChanging(int value);
    partial void OnPackageIdChanged();
    partial void OnShapeIdChanging(int value);
    partial void OnShapeIdChanged();
    #endregion
		
		public ShapePackage()
		{
			this._Package = default(EntityRef<Package>);
			this._Shape = default(EntityRef<Shape>);
			OnCreated();
		}
		
		[Column(Storage="_ShapePackageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShapePackageId
		{
			get
			{
				return this._ShapePackageId;
			}
			set
			{
				if ((this._ShapePackageId != value))
				{
					this.OnShapePackageIdChanging(value);
					this.SendPropertyChanging();
					this._ShapePackageId = value;
					this.SendPropertyChanged("ShapePackageId");
					this.OnShapePackageIdChanged();
				}
			}
		}
		
		[Column(Storage="_PackageId", DbType="Int NOT NULL")]
		public int PackageId
		{
			get
			{
				return this._PackageId;
			}
			set
			{
				if ((this._PackageId != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIdChanging(value);
					this.SendPropertyChanging();
					this._PackageId = value;
					this.SendPropertyChanged("PackageId");
					this.OnPackageIdChanged();
				}
			}
		}
		
		[Column(Storage="_ShapeId", DbType="Int NOT NULL")]
		public int ShapeId
		{
			get
			{
				return this._ShapeId;
			}
			set
			{
				if ((this._ShapeId != value))
				{
					if (this._Shape.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShapeIdChanging(value);
					this.SendPropertyChanging();
					this._ShapeId = value;
					this.SendPropertyChanged("ShapeId");
					this.OnShapeIdChanged();
				}
			}
		}
		
		[Association(Name="Package_ShapePackage", Storage="_Package", ThisKey="PackageId", OtherKey="PackageId", IsForeignKey=true)]
		public Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				Package previousValue = this._Package.Entity;
				if (((previousValue != value) 
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.ShapePackage.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.ShapePackage.Add(this);
						this._PackageId = value.PackageId;
					}
					else
					{
						this._PackageId = default(int);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}
		
		[Association(Name="Shape_ShapePackage", Storage="_Shape", ThisKey="ShapeId", OtherKey="ShapeId", IsForeignKey=true)]
		public Shape Shape
		{
			get
			{
				return this._Shape.Entity;
			}
			set
			{
				Shape previousValue = this._Shape.Entity;
				if (((previousValue != value) 
							|| (this._Shape.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shape.Entity = null;
						previousValue.ShapePackage.Remove(this);
					}
					this._Shape.Entity = value;
					if ((value != null))
					{
						value.ShapePackage.Add(this);
						this._ShapeId = value.ShapeId;
					}
					else
					{
						this._ShapeId = default(int);
					}
					this.SendPropertyChanged("Shape");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ShapeRoute")]
	public partial class ShapeRoute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShapeRouteId;
		
		private int _ShapeId;
		
		private int _RouteId;
		
		private EntityRef<Shape> _Shape;
		
		private EntityRef<Route> _Route;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShapeRouteIdChanging(int value);
    partial void OnShapeRouteIdChanged();
    partial void OnShapeIdChanging(int value);
    partial void OnShapeIdChanged();
    partial void OnRouteIdChanging(int value);
    partial void OnRouteIdChanged();
    #endregion
		
		public ShapeRoute()
		{
			this._Shape = default(EntityRef<Shape>);
			this._Route = default(EntityRef<Route>);
			OnCreated();
		}
		
		[Column(Storage="_ShapeRouteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShapeRouteId
		{
			get
			{
				return this._ShapeRouteId;
			}
			set
			{
				if ((this._ShapeRouteId != value))
				{
					this.OnShapeRouteIdChanging(value);
					this.SendPropertyChanging();
					this._ShapeRouteId = value;
					this.SendPropertyChanged("ShapeRouteId");
					this.OnShapeRouteIdChanged();
				}
			}
		}
		
		[Column(Storage="_ShapeId", DbType="Int NOT NULL")]
		public int ShapeId
		{
			get
			{
				return this._ShapeId;
			}
			set
			{
				if ((this._ShapeId != value))
				{
					if (this._Shape.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShapeIdChanging(value);
					this.SendPropertyChanging();
					this._ShapeId = value;
					this.SendPropertyChanged("ShapeId");
					this.OnShapeIdChanged();
				}
			}
		}
		
		[Column(Storage="_RouteId", DbType="Int NOT NULL")]
		public int RouteId
		{
			get
			{
				return this._RouteId;
			}
			set
			{
				if ((this._RouteId != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteIdChanging(value);
					this.SendPropertyChanging();
					this._RouteId = value;
					this.SendPropertyChanged("RouteId");
					this.OnRouteIdChanged();
				}
			}
		}
		
		[Association(Name="Shape_ShapeRoute", Storage="_Shape", ThisKey="ShapeId", OtherKey="ShapeId", IsForeignKey=true)]
		public Shape Shape
		{
			get
			{
				return this._Shape.Entity;
			}
			set
			{
				Shape previousValue = this._Shape.Entity;
				if (((previousValue != value) 
							|| (this._Shape.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shape.Entity = null;
						previousValue.ShapeRoute.Remove(this);
					}
					this._Shape.Entity = value;
					if ((value != null))
					{
						value.ShapeRoute.Add(this);
						this._ShapeId = value.ShapeId;
					}
					else
					{
						this._ShapeId = default(int);
					}
					this.SendPropertyChanged("Shape");
				}
			}
		}
		
		[Association(Name="Route_ShapeRoute", Storage="_Route", ThisKey="RouteId", OtherKey="RouteId", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.ShapeRoute.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.ShapeRoute.Add(this);
						this._RouteId = value.RouteId;
					}
					else
					{
						this._RouteId = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ShapeUnit")]
	public partial class ShapeUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShapeUnitId;
		
		private int _ShapeId;
		
		private int _UnitId;
		
		private EntityRef<Shape> _Shape;
		
		private EntityRef<Unit> _Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShapeUnitIdChanging(int value);
    partial void OnShapeUnitIdChanged();
    partial void OnShapeIdChanging(int value);
    partial void OnShapeIdChanged();
    partial void OnUnitIdChanging(int value);
    partial void OnUnitIdChanged();
    #endregion
		
		public ShapeUnit()
		{
			this._Shape = default(EntityRef<Shape>);
			this._Unit = default(EntityRef<Unit>);
			OnCreated();
		}
		
		[Column(Storage="_ShapeUnitId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShapeUnitId
		{
			get
			{
				return this._ShapeUnitId;
			}
			set
			{
				if ((this._ShapeUnitId != value))
				{
					this.OnShapeUnitIdChanging(value);
					this.SendPropertyChanging();
					this._ShapeUnitId = value;
					this.SendPropertyChanged("ShapeUnitId");
					this.OnShapeUnitIdChanged();
				}
			}
		}
		
		[Column(Storage="_ShapeId", DbType="Int NOT NULL")]
		public int ShapeId
		{
			get
			{
				return this._ShapeId;
			}
			set
			{
				if ((this._ShapeId != value))
				{
					if (this._Shape.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShapeIdChanging(value);
					this.SendPropertyChanging();
					this._ShapeId = value;
					this.SendPropertyChanged("ShapeId");
					this.OnShapeIdChanged();
				}
			}
		}
		
		[Column(Storage="_UnitId", DbType="Int NOT NULL")]
		public int UnitId
		{
			get
			{
				return this._UnitId;
			}
			set
			{
				if ((this._UnitId != value))
				{
					if (this._Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIdChanging(value);
					this.SendPropertyChanging();
					this._UnitId = value;
					this.SendPropertyChanged("UnitId");
					this.OnUnitIdChanged();
				}
			}
		}
		
		[Association(Name="Shape_ShapeUnit", Storage="_Shape", ThisKey="ShapeId", OtherKey="ShapeId", IsForeignKey=true)]
		public Shape Shape
		{
			get
			{
				return this._Shape.Entity;
			}
			set
			{
				Shape previousValue = this._Shape.Entity;
				if (((previousValue != value) 
							|| (this._Shape.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shape.Entity = null;
						previousValue.ShapeUnit.Remove(this);
					}
					this._Shape.Entity = value;
					if ((value != null))
					{
						value.ShapeUnit.Add(this);
						this._ShapeId = value.ShapeId;
					}
					else
					{
						this._ShapeId = default(int);
					}
					this.SendPropertyChanged("Shape");
				}
			}
		}
		
		[Association(Name="Unit_ShapeUnit", Storage="_Unit", ThisKey="UnitId", OtherKey="UnitId", IsForeignKey=true)]
		public Unit Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				Unit previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.ShapeUnit.Remove(this);
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.ShapeUnit.Add(this);
						this._UnitId = value.UnitId;
					}
					else
					{
						this._UnitId = default(int);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Substance")]
	public partial class Substance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubstanceId;
		
		private string _SubstanceName;
		
		private System.Data.Linq.Binary _VersionTimeStamp;
		
		private System.Nullable<bool> _IsGeneric;
		
		private System.Nullable<int> _SubstanceGroupId;
		
		private EntitySet<FormulariumSubstanceText> _FormulariumSubstanceText;
		
		private EntitySet<Product> _Product;
		
		private EntitySet<ProductSubstance> _ProductSubstance;
		
		private EntitySet<SubstanceDosingAdvice> _SubstanceDosingAdvice;
		
		private EntityRef<SubstanceGroup> _SubstanceGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubstanceIdChanging(int value);
    partial void OnSubstanceIdChanged();
    partial void OnSubstanceNameChanging(string value);
    partial void OnSubstanceNameChanged();
    partial void OnVersionTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnVersionTimeStampChanged();
    partial void OnIsGenericChanging(System.Nullable<bool> value);
    partial void OnIsGenericChanged();
    partial void OnSubstanceGroupIdChanging(System.Nullable<int> value);
    partial void OnSubstanceGroupIdChanged();
    #endregion
		
		public Substance()
		{
			this._FormulariumSubstanceText = new EntitySet<FormulariumSubstanceText>(new Action<FormulariumSubstanceText>(this.attach_FormulariumSubstanceText), new Action<FormulariumSubstanceText>(this.detach_FormulariumSubstanceText));
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			this._ProductSubstance = new EntitySet<ProductSubstance>(new Action<ProductSubstance>(this.attach_ProductSubstance), new Action<ProductSubstance>(this.detach_ProductSubstance));
			this._SubstanceDosingAdvice = new EntitySet<SubstanceDosingAdvice>(new Action<SubstanceDosingAdvice>(this.attach_SubstanceDosingAdvice), new Action<SubstanceDosingAdvice>(this.detach_SubstanceDosingAdvice));
			this._SubstanceGroup = default(EntityRef<SubstanceGroup>);
			OnCreated();
		}
		
		[Column(Storage="_SubstanceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int SubstanceId
		{
			get
			{
				return this._SubstanceId;
			}
			set
			{
				if ((this._SubstanceId != value))
				{
					this.OnSubstanceIdChanging(value);
					this.SendPropertyChanging();
					this._SubstanceId = value;
					this.SendPropertyChanged("SubstanceId");
					this.OnSubstanceIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubstanceName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SubstanceName
		{
			get
			{
				return this._SubstanceName;
			}
			set
			{
				if ((this._SubstanceName != value))
				{
					this.OnSubstanceNameChanging(value);
					this.SendPropertyChanging();
					this._SubstanceName = value;
					this.SendPropertyChanged("SubstanceName");
					this.OnSubstanceNameChanged();
				}
			}
		}
		
		[Column(Storage="_VersionTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionTimeStamp
		{
			get
			{
				return this._VersionTimeStamp;
			}
			set
			{
				if ((this._VersionTimeStamp != value))
				{
					this.OnVersionTimeStampChanging(value);
					this.SendPropertyChanging();
					this._VersionTimeStamp = value;
					this.SendPropertyChanged("VersionTimeStamp");
					this.OnVersionTimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_IsGeneric", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsGeneric
		{
			get
			{
				return this._IsGeneric;
			}
			set
			{
				if ((this._IsGeneric != value))
				{
					this.OnIsGenericChanging(value);
					this.SendPropertyChanging();
					this._IsGeneric = value;
					this.SendPropertyChanged("IsGeneric");
					this.OnIsGenericChanged();
				}
			}
		}
		
		[Column(Storage="_SubstanceGroupId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SubstanceGroupId
		{
			get
			{
				return this._SubstanceGroupId;
			}
			set
			{
				if ((this._SubstanceGroupId != value))
				{
					if (this._SubstanceGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstanceGroupIdChanging(value);
					this.SendPropertyChanging();
					this._SubstanceGroupId = value;
					this.SendPropertyChanged("SubstanceGroupId");
					this.OnSubstanceGroupIdChanged();
				}
			}
		}
		
		[Association(Name="Substance_FormulariumSubstanceText", Storage="_FormulariumSubstanceText", ThisKey="SubstanceId", OtherKey="SubstanceId")]
		public EntitySet<FormulariumSubstanceText> FormulariumSubstanceText
		{
			get
			{
				return this._FormulariumSubstanceText;
			}
			set
			{
				this._FormulariumSubstanceText.Assign(value);
			}
		}
		
		[Association(Name="Substance_Product", Storage="_Product", ThisKey="SubstanceId", OtherKey="GenericId")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		[Association(Name="Substance_ProductSubstance", Storage="_ProductSubstance", ThisKey="SubstanceId", OtherKey="SubstanceId")]
		public EntitySet<ProductSubstance> ProductSubstance
		{
			get
			{
				return this._ProductSubstance;
			}
			set
			{
				this._ProductSubstance.Assign(value);
			}
		}
		
		[Association(Name="Substance_SubstanceDosingAdvice", Storage="_SubstanceDosingAdvice", ThisKey="SubstanceId", OtherKey="SubstanceId")]
		public EntitySet<SubstanceDosingAdvice> SubstanceDosingAdvice
		{
			get
			{
				return this._SubstanceDosingAdvice;
			}
			set
			{
				this._SubstanceDosingAdvice.Assign(value);
			}
		}
		
		[Association(Name="SubstanceGroup_Substance", Storage="_SubstanceGroup", ThisKey="SubstanceGroupId", OtherKey="SubstanceGroupId", IsForeignKey=true)]
		public SubstanceGroup SubstanceGroup
		{
			get
			{
				return this._SubstanceGroup.Entity;
			}
			set
			{
				SubstanceGroup previousValue = this._SubstanceGroup.Entity;
				if (((previousValue != value) 
							|| (this._SubstanceGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubstanceGroup.Entity = null;
						previousValue.Substance.Remove(this);
					}
					this._SubstanceGroup.Entity = value;
					if ((value != null))
					{
						value.Substance.Add(this);
						this._SubstanceGroupId = value.SubstanceGroupId;
					}
					else
					{
						this._SubstanceGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubstanceGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FormulariumSubstanceText(FormulariumSubstanceText entity)
		{
			this.SendPropertyChanging();
			entity.Substance = this;
		}
		
		private void detach_FormulariumSubstanceText(FormulariumSubstanceText entity)
		{
			this.SendPropertyChanging();
			entity.Substance = null;
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Substance = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Substance = null;
		}
		
		private void attach_ProductSubstance(ProductSubstance entity)
		{
			this.SendPropertyChanging();
			entity.Substance = this;
		}
		
		private void detach_ProductSubstance(ProductSubstance entity)
		{
			this.SendPropertyChanging();
			entity.Substance = null;
		}
		
		private void attach_SubstanceDosingAdvice(SubstanceDosingAdvice entity)
		{
			this.SendPropertyChanging();
			entity.Substance = this;
		}
		
		private void detach_SubstanceDosingAdvice(SubstanceDosingAdvice entity)
		{
			this.SendPropertyChanging();
			entity.Substance = null;
		}
	}
	
	[Table(Name="dbo.SubstanceDosingAdvice")]
	public partial class SubstanceDosingAdvice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubstanceDosingAdviceId;
		
		private int _TextItemId;
		
		private int _SubstanceId;
		
		private System.Nullable<int> _FormulariumId;
		
		private System.Nullable<int> _IndicationId;
		
		private EntitySet<DosingAdviceChapter> _DosingAdviceChapter;
		
		private EntitySet<DosingAdviceProduct> _DosingAdviceProduct;
		
		private EntitySet<DosingAdviceRoute> _DosingAdviceRoute;
		
		private EntityRef<Formularium> _Formularium;
		
		private EntityRef<Substance> _Substance;
		
		private EntityRef<Indication> _Indication;
		
		private EntityRef<TextItem> _TextItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubstanceDosingAdviceIdChanging(int value);
    partial void OnSubstanceDosingAdviceIdChanged();
    partial void OnTextItemIdChanging(int value);
    partial void OnTextItemIdChanged();
    partial void OnSubstanceIdChanging(int value);
    partial void OnSubstanceIdChanged();
    partial void OnFormulariumIdChanging(System.Nullable<int> value);
    partial void OnFormulariumIdChanged();
    partial void OnIndicationIdChanging(System.Nullable<int> value);
    partial void OnIndicationIdChanged();
    #endregion
		
		public SubstanceDosingAdvice()
		{
			this._DosingAdviceChapter = new EntitySet<DosingAdviceChapter>(new Action<DosingAdviceChapter>(this.attach_DosingAdviceChapter), new Action<DosingAdviceChapter>(this.detach_DosingAdviceChapter));
			this._DosingAdviceProduct = new EntitySet<DosingAdviceProduct>(new Action<DosingAdviceProduct>(this.attach_DosingAdviceProduct), new Action<DosingAdviceProduct>(this.detach_DosingAdviceProduct));
			this._DosingAdviceRoute = new EntitySet<DosingAdviceRoute>(new Action<DosingAdviceRoute>(this.attach_DosingAdviceRoute), new Action<DosingAdviceRoute>(this.detach_DosingAdviceRoute));
			this._Formularium = default(EntityRef<Formularium>);
			this._Substance = default(EntityRef<Substance>);
			this._Indication = default(EntityRef<Indication>);
			this._TextItem = default(EntityRef<TextItem>);
			OnCreated();
		}
		
		[Column(Storage="_SubstanceDosingAdviceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubstanceDosingAdviceId
		{
			get
			{
				return this._SubstanceDosingAdviceId;
			}
			set
			{
				if ((this._SubstanceDosingAdviceId != value))
				{
					this.OnSubstanceDosingAdviceIdChanging(value);
					this.SendPropertyChanging();
					this._SubstanceDosingAdviceId = value;
					this.SendPropertyChanged("SubstanceDosingAdviceId");
					this.OnSubstanceDosingAdviceIdChanged();
				}
			}
		}
		
		[Column(Storage="_TextItemId", DbType="Int NOT NULL")]
		public int TextItemId
		{
			get
			{
				return this._TextItemId;
			}
			set
			{
				if ((this._TextItemId != value))
				{
					if (this._TextItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextItemIdChanging(value);
					this.SendPropertyChanging();
					this._TextItemId = value;
					this.SendPropertyChanged("TextItemId");
					this.OnTextItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubstanceId", DbType="Int NOT NULL")]
		public int SubstanceId
		{
			get
			{
				return this._SubstanceId;
			}
			set
			{
				if ((this._SubstanceId != value))
				{
					if (this._Substance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstanceIdChanging(value);
					this.SendPropertyChanging();
					this._SubstanceId = value;
					this.SendPropertyChanged("SubstanceId");
					this.OnSubstanceIdChanged();
				}
			}
		}
		
		[Column(Storage="_FormulariumId", DbType="Int")]
		public System.Nullable<int> FormulariumId
		{
			get
			{
				return this._FormulariumId;
			}
			set
			{
				if ((this._FormulariumId != value))
				{
					if (this._Formularium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormulariumIdChanging(value);
					this.SendPropertyChanging();
					this._FormulariumId = value;
					this.SendPropertyChanged("FormulariumId");
					this.OnFormulariumIdChanged();
				}
			}
		}
		
		[Column(Storage="_IndicationId", DbType="Int")]
		public System.Nullable<int> IndicationId
		{
			get
			{
				return this._IndicationId;
			}
			set
			{
				if ((this._IndicationId != value))
				{
					if (this._Indication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIndicationIdChanging(value);
					this.SendPropertyChanging();
					this._IndicationId = value;
					this.SendPropertyChanged("IndicationId");
					this.OnIndicationIdChanged();
				}
			}
		}
		
		[Association(Name="SubstanceDosingAdvice_DosingAdviceChapter", Storage="_DosingAdviceChapter", ThisKey="SubstanceDosingAdviceId", OtherKey="SubstanceDosingAdviceId")]
		public EntitySet<DosingAdviceChapter> DosingAdviceChapter
		{
			get
			{
				return this._DosingAdviceChapter;
			}
			set
			{
				this._DosingAdviceChapter.Assign(value);
			}
		}
		
		[Association(Name="SubstanceDosingAdvice_DosingAdviceProduct", Storage="_DosingAdviceProduct", ThisKey="SubstanceDosingAdviceId", OtherKey="SubstanceDosingAdviceId")]
		public EntitySet<DosingAdviceProduct> DosingAdviceProduct
		{
			get
			{
				return this._DosingAdviceProduct;
			}
			set
			{
				this._DosingAdviceProduct.Assign(value);
			}
		}
		
		[Association(Name="SubstanceDosingAdvice_DosingAdviceRoute", Storage="_DosingAdviceRoute", ThisKey="SubstanceDosingAdviceId", OtherKey="SubstanceDosingAdviceId")]
		public EntitySet<DosingAdviceRoute> DosingAdviceRoute
		{
			get
			{
				return this._DosingAdviceRoute;
			}
			set
			{
				this._DosingAdviceRoute.Assign(value);
			}
		}
		
		[Association(Name="Formularium_SubstanceDosingAdvice", Storage="_Formularium", ThisKey="FormulariumId", OtherKey="FormulariumId", IsForeignKey=true)]
		public Formularium Formularium
		{
			get
			{
				return this._Formularium.Entity;
			}
			set
			{
				Formularium previousValue = this._Formularium.Entity;
				if (((previousValue != value) 
							|| (this._Formularium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formularium.Entity = null;
						previousValue.SubstanceDosingAdvice.Remove(this);
					}
					this._Formularium.Entity = value;
					if ((value != null))
					{
						value.SubstanceDosingAdvice.Add(this);
						this._FormulariumId = value.FormulariumId;
					}
					else
					{
						this._FormulariumId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Formularium");
				}
			}
		}
		
		[Association(Name="Substance_SubstanceDosingAdvice", Storage="_Substance", ThisKey="SubstanceId", OtherKey="SubstanceId", IsForeignKey=true)]
		public Substance Substance
		{
			get
			{
				return this._Substance.Entity;
			}
			set
			{
				Substance previousValue = this._Substance.Entity;
				if (((previousValue != value) 
							|| (this._Substance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Substance.Entity = null;
						previousValue.SubstanceDosingAdvice.Remove(this);
					}
					this._Substance.Entity = value;
					if ((value != null))
					{
						value.SubstanceDosingAdvice.Add(this);
						this._SubstanceId = value.SubstanceId;
					}
					else
					{
						this._SubstanceId = default(int);
					}
					this.SendPropertyChanged("Substance");
				}
			}
		}
		
		[Association(Name="Indication_SubstanceDosingAdvice", Storage="_Indication", ThisKey="IndicationId", OtherKey="IndicationId", IsForeignKey=true)]
		public Indication Indication
		{
			get
			{
				return this._Indication.Entity;
			}
			set
			{
				Indication previousValue = this._Indication.Entity;
				if (((previousValue != value) 
							|| (this._Indication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Indication.Entity = null;
						previousValue.SubstanceDosingAdvice.Remove(this);
					}
					this._Indication.Entity = value;
					if ((value != null))
					{
						value.SubstanceDosingAdvice.Add(this);
						this._IndicationId = value.IndicationId;
					}
					else
					{
						this._IndicationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Indication");
				}
			}
		}
		
		[Association(Name="TextItem_SubstanceDosingAdvice", Storage="_TextItem", ThisKey="TextItemId", OtherKey="TextItemId", IsForeignKey=true)]
		public TextItem TextItem
		{
			get
			{
				return this._TextItem.Entity;
			}
			set
			{
				TextItem previousValue = this._TextItem.Entity;
				if (((previousValue != value) 
							|| (this._TextItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TextItem.Entity = null;
						previousValue.SubstanceDosingAdvice.Remove(this);
					}
					this._TextItem.Entity = value;
					if ((value != null))
					{
						value.SubstanceDosingAdvice.Add(this);
						this._TextItemId = value.TextItemId;
					}
					else
					{
						this._TextItemId = default(int);
					}
					this.SendPropertyChanged("TextItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DosingAdviceChapter(DosingAdviceChapter entity)
		{
			this.SendPropertyChanging();
			entity.SubstanceDosingAdvice = this;
		}
		
		private void detach_DosingAdviceChapter(DosingAdviceChapter entity)
		{
			this.SendPropertyChanging();
			entity.SubstanceDosingAdvice = null;
		}
		
		private void attach_DosingAdviceProduct(DosingAdviceProduct entity)
		{
			this.SendPropertyChanging();
			entity.SubstanceDosingAdvice = this;
		}
		
		private void detach_DosingAdviceProduct(DosingAdviceProduct entity)
		{
			this.SendPropertyChanging();
			entity.SubstanceDosingAdvice = null;
		}
		
		private void attach_DosingAdviceRoute(DosingAdviceRoute entity)
		{
			this.SendPropertyChanging();
			entity.SubstanceDosingAdvice = this;
		}
		
		private void detach_DosingAdviceRoute(DosingAdviceRoute entity)
		{
			this.SendPropertyChanging();
			entity.SubstanceDosingAdvice = null;
		}
	}
	
	[Table(Name="dbo.SubstanceGroup")]
	public partial class SubstanceGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubstanceGroupId;
		
		private string _SubstanceGroupName;
		
		private System.Data.Linq.Binary _VersionTimeStamp;
		
		private System.Nullable<int> _MainSubstanceGroupId;
		
		private EntitySet<Substance> _Substance;
		
		private EntitySet<SubstanceGroup> _SubstanceGroup2;
		
		private EntityRef<SubstanceGroup> _SubstanceGroup1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubstanceGroupIdChanging(int value);
    partial void OnSubstanceGroupIdChanged();
    partial void OnSubstanceGroupNameChanging(string value);
    partial void OnSubstanceGroupNameChanged();
    partial void OnVersionTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnVersionTimeStampChanged();
    partial void OnMainSubstanceGroupIdChanging(System.Nullable<int> value);
    partial void OnMainSubstanceGroupIdChanged();
    #endregion
		
		public SubstanceGroup()
		{
			this._Substance = new EntitySet<Substance>(new Action<Substance>(this.attach_Substance), new Action<Substance>(this.detach_Substance));
			this._SubstanceGroup2 = new EntitySet<SubstanceGroup>(new Action<SubstanceGroup>(this.attach_SubstanceGroup2), new Action<SubstanceGroup>(this.detach_SubstanceGroup2));
			this._SubstanceGroup1 = default(EntityRef<SubstanceGroup>);
			OnCreated();
		}
		
		[Column(Storage="_SubstanceGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int SubstanceGroupId
		{
			get
			{
				return this._SubstanceGroupId;
			}
			set
			{
				if ((this._SubstanceGroupId != value))
				{
					this.OnSubstanceGroupIdChanging(value);
					this.SendPropertyChanging();
					this._SubstanceGroupId = value;
					this.SendPropertyChanged("SubstanceGroupId");
					this.OnSubstanceGroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubstanceGroupName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SubstanceGroupName
		{
			get
			{
				return this._SubstanceGroupName;
			}
			set
			{
				if ((this._SubstanceGroupName != value))
				{
					this.OnSubstanceGroupNameChanging(value);
					this.SendPropertyChanging();
					this._SubstanceGroupName = value;
					this.SendPropertyChanged("SubstanceGroupName");
					this.OnSubstanceGroupNameChanged();
				}
			}
		}
		
		[Column(Storage="_VersionTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionTimeStamp
		{
			get
			{
				return this._VersionTimeStamp;
			}
			set
			{
				if ((this._VersionTimeStamp != value))
				{
					this.OnVersionTimeStampChanging(value);
					this.SendPropertyChanging();
					this._VersionTimeStamp = value;
					this.SendPropertyChanged("VersionTimeStamp");
					this.OnVersionTimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_MainSubstanceGroupId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MainSubstanceGroupId
		{
			get
			{
				return this._MainSubstanceGroupId;
			}
			set
			{
				if ((this._MainSubstanceGroupId != value))
				{
					if (this._SubstanceGroup1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMainSubstanceGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MainSubstanceGroupId = value;
					this.SendPropertyChanged("MainSubstanceGroupId");
					this.OnMainSubstanceGroupIdChanged();
				}
			}
		}
		
		[Association(Name="SubstanceGroup_Substance", Storage="_Substance", ThisKey="SubstanceGroupId", OtherKey="SubstanceGroupId")]
		public EntitySet<Substance> Substance
		{
			get
			{
				return this._Substance;
			}
			set
			{
				this._Substance.Assign(value);
			}
		}
		
		[Association(Name="SubstanceGroup_SubstanceGroup", Storage="_SubstanceGroup2", ThisKey="SubstanceGroupId", OtherKey="MainSubstanceGroupId")]
		public EntitySet<SubstanceGroup> SubstanceGroup2
		{
			get
			{
				return this._SubstanceGroup2;
			}
			set
			{
				this._SubstanceGroup2.Assign(value);
			}
		}
		
		[Association(Name="SubstanceGroup_SubstanceGroup", Storage="_SubstanceGroup1", ThisKey="MainSubstanceGroupId", OtherKey="SubstanceGroupId", IsForeignKey=true)]
		public SubstanceGroup SubstanceGroup1
		{
			get
			{
				return this._SubstanceGroup1.Entity;
			}
			set
			{
				SubstanceGroup previousValue = this._SubstanceGroup1.Entity;
				if (((previousValue != value) 
							|| (this._SubstanceGroup1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubstanceGroup1.Entity = null;
						previousValue.SubstanceGroup2.Remove(this);
					}
					this._SubstanceGroup1.Entity = value;
					if ((value != null))
					{
						value.SubstanceGroup2.Add(this);
						this._MainSubstanceGroupId = value.SubstanceGroupId;
					}
					else
					{
						this._MainSubstanceGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubstanceGroup1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Substance(Substance entity)
		{
			this.SendPropertyChanging();
			entity.SubstanceGroup = this;
		}
		
		private void detach_Substance(Substance entity)
		{
			this.SendPropertyChanging();
			entity.SubstanceGroup = null;
		}
		
		private void attach_SubstanceGroup2(SubstanceGroup entity)
		{
			this.SendPropertyChanging();
			entity.SubstanceGroup1 = this;
		}
		
		private void detach_SubstanceGroup2(SubstanceGroup entity)
		{
			this.SendPropertyChanging();
			entity.SubstanceGroup1 = null;
		}
	}
	
	[Table(Name="dbo.TextItem")]
	public partial class TextItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TextItemId;
		
		private string _TextType;
		
		private string _TextStatus;
		
		private System.Data.Linq.Binary _VersionTimeStamp;
		
		private string _Text;
		
		private string _TextHeading;
		
		private EntitySet<FormulariumChapterText> _FormulariumChapterText;
		
		private EntitySet<FormulariumSubstanceText> _FormulariumSubstanceText;
		
		private EntitySet<FormulariumText> _FormulariumText;
		
		private EntitySet<ProductFormulariumText> _ProductFormulariumText;
		
		private EntitySet<SubstanceDosingAdvice> _SubstanceDosingAdvice;
		
		private EntitySet<TextLog> _TextLog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTextItemIdChanging(int value);
    partial void OnTextItemIdChanged();
    partial void OnTextTypeChanging(string value);
    partial void OnTextTypeChanged();
    partial void OnTextStatusChanging(string value);
    partial void OnTextStatusChanged();
    partial void OnVersionTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnVersionTimeStampChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnTextHeadingChanging(string value);
    partial void OnTextHeadingChanged();
    #endregion
		
		public TextItem()
		{
			this._FormulariumChapterText = new EntitySet<FormulariumChapterText>(new Action<FormulariumChapterText>(this.attach_FormulariumChapterText), new Action<FormulariumChapterText>(this.detach_FormulariumChapterText));
			this._FormulariumSubstanceText = new EntitySet<FormulariumSubstanceText>(new Action<FormulariumSubstanceText>(this.attach_FormulariumSubstanceText), new Action<FormulariumSubstanceText>(this.detach_FormulariumSubstanceText));
			this._FormulariumText = new EntitySet<FormulariumText>(new Action<FormulariumText>(this.attach_FormulariumText), new Action<FormulariumText>(this.detach_FormulariumText));
			this._ProductFormulariumText = new EntitySet<ProductFormulariumText>(new Action<ProductFormulariumText>(this.attach_ProductFormulariumText), new Action<ProductFormulariumText>(this.detach_ProductFormulariumText));
			this._SubstanceDosingAdvice = new EntitySet<SubstanceDosingAdvice>(new Action<SubstanceDosingAdvice>(this.attach_SubstanceDosingAdvice), new Action<SubstanceDosingAdvice>(this.detach_SubstanceDosingAdvice));
			this._TextLog = new EntitySet<TextLog>(new Action<TextLog>(this.attach_TextLog), new Action<TextLog>(this.detach_TextLog));
			OnCreated();
		}
		
		[Column(Storage="_TextItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int TextItemId
		{
			get
			{
				return this._TextItemId;
			}
			set
			{
				if ((this._TextItemId != value))
				{
					this.OnTextItemIdChanging(value);
					this.SendPropertyChanging();
					this._TextItemId = value;
					this.SendPropertyChanged("TextItemId");
					this.OnTextItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_TextType", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TextType
		{
			get
			{
				return this._TextType;
			}
			set
			{
				if ((this._TextType != value))
				{
					this.OnTextTypeChanging(value);
					this.SendPropertyChanging();
					this._TextType = value;
					this.SendPropertyChanged("TextType");
					this.OnTextTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TextStatus", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TextStatus
		{
			get
			{
				return this._TextStatus;
			}
			set
			{
				if ((this._TextStatus != value))
				{
					this.OnTextStatusChanging(value);
					this.SendPropertyChanging();
					this._TextStatus = value;
					this.SendPropertyChanged("TextStatus");
					this.OnTextStatusChanged();
				}
			}
		}
		
		[Column(Storage="_VersionTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionTimeStamp
		{
			get
			{
				return this._VersionTimeStamp;
			}
			set
			{
				if ((this._VersionTimeStamp != value))
				{
					this.OnVersionTimeStampChanging(value);
					this.SendPropertyChanging();
					this._VersionTimeStamp = value;
					this.SendPropertyChanged("VersionTimeStamp");
					this.OnVersionTimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_TextHeading", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string TextHeading
		{
			get
			{
				return this._TextHeading;
			}
			set
			{
				if ((this._TextHeading != value))
				{
					this.OnTextHeadingChanging(value);
					this.SendPropertyChanging();
					this._TextHeading = value;
					this.SendPropertyChanged("TextHeading");
					this.OnTextHeadingChanged();
				}
			}
		}
		
		[Association(Name="TextItem_FormulariumChapterText", Storage="_FormulariumChapterText", ThisKey="TextItemId", OtherKey="TextItemId")]
		public EntitySet<FormulariumChapterText> FormulariumChapterText
		{
			get
			{
				return this._FormulariumChapterText;
			}
			set
			{
				this._FormulariumChapterText.Assign(value);
			}
		}
		
		[Association(Name="TextItem_FormulariumSubstanceText", Storage="_FormulariumSubstanceText", ThisKey="TextItemId", OtherKey="TextItemId")]
		public EntitySet<FormulariumSubstanceText> FormulariumSubstanceText
		{
			get
			{
				return this._FormulariumSubstanceText;
			}
			set
			{
				this._FormulariumSubstanceText.Assign(value);
			}
		}
		
		[Association(Name="TextItem_FormulariumText", Storage="_FormulariumText", ThisKey="TextItemId", OtherKey="TextItemId")]
		public EntitySet<FormulariumText> FormulariumText
		{
			get
			{
				return this._FormulariumText;
			}
			set
			{
				this._FormulariumText.Assign(value);
			}
		}
		
		[Association(Name="TextItem_ProductFormulariumText", Storage="_ProductFormulariumText", ThisKey="TextItemId", OtherKey="TextItemId")]
		public EntitySet<ProductFormulariumText> ProductFormulariumText
		{
			get
			{
				return this._ProductFormulariumText;
			}
			set
			{
				this._ProductFormulariumText.Assign(value);
			}
		}
		
		[Association(Name="TextItem_SubstanceDosingAdvice", Storage="_SubstanceDosingAdvice", ThisKey="TextItemId", OtherKey="TextItemId")]
		public EntitySet<SubstanceDosingAdvice> SubstanceDosingAdvice
		{
			get
			{
				return this._SubstanceDosingAdvice;
			}
			set
			{
				this._SubstanceDosingAdvice.Assign(value);
			}
		}
		
		[Association(Name="TextItem_TextLog", Storage="_TextLog", ThisKey="TextItemId", OtherKey="TextItemId")]
		public EntitySet<TextLog> TextLog
		{
			get
			{
				return this._TextLog;
			}
			set
			{
				this._TextLog.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FormulariumChapterText(FormulariumChapterText entity)
		{
			this.SendPropertyChanging();
			entity.TextItem = this;
		}
		
		private void detach_FormulariumChapterText(FormulariumChapterText entity)
		{
			this.SendPropertyChanging();
			entity.TextItem = null;
		}
		
		private void attach_FormulariumSubstanceText(FormulariumSubstanceText entity)
		{
			this.SendPropertyChanging();
			entity.TextItem = this;
		}
		
		private void detach_FormulariumSubstanceText(FormulariumSubstanceText entity)
		{
			this.SendPropertyChanging();
			entity.TextItem = null;
		}
		
		private void attach_FormulariumText(FormulariumText entity)
		{
			this.SendPropertyChanging();
			entity.TextItem = this;
		}
		
		private void detach_FormulariumText(FormulariumText entity)
		{
			this.SendPropertyChanging();
			entity.TextItem = null;
		}
		
		private void attach_ProductFormulariumText(ProductFormulariumText entity)
		{
			this.SendPropertyChanging();
			entity.TextItem = this;
		}
		
		private void detach_ProductFormulariumText(ProductFormulariumText entity)
		{
			this.SendPropertyChanging();
			entity.TextItem = null;
		}
		
		private void attach_SubstanceDosingAdvice(SubstanceDosingAdvice entity)
		{
			this.SendPropertyChanging();
			entity.TextItem = this;
		}
		
		private void detach_SubstanceDosingAdvice(SubstanceDosingAdvice entity)
		{
			this.SendPropertyChanging();
			entity.TextItem = null;
		}
		
		private void attach_TextLog(TextLog entity)
		{
			this.SendPropertyChanging();
			entity.TextItem = this;
		}
		
		private void detach_TextLog(TextLog entity)
		{
			this.SendPropertyChanging();
			entity.TextItem = null;
		}
	}
	
	[Table(Name="dbo.TextLog")]
	public partial class TextLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TextLogId;
		
		private System.DateTime _LogData;
		
		private int _FormulariumId;
		
		private int _TextItemId;
		
		private int _UserId;
		
		private string _Action;
		
		private EntityRef<Formularium> _Formularium;
		
		private EntityRef<TextItem> _TextItem;
		
		private EntityRef<GenFormUser> _GenFormUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTextLogIdChanging(int value);
    partial void OnTextLogIdChanged();
    partial void OnLogDataChanging(System.DateTime value);
    partial void OnLogDataChanged();
    partial void OnFormulariumIdChanging(int value);
    partial void OnFormulariumIdChanged();
    partial void OnTextItemIdChanging(int value);
    partial void OnTextItemIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    #endregion
		
		public TextLog()
		{
			this._Formularium = default(EntityRef<Formularium>);
			this._TextItem = default(EntityRef<TextItem>);
			this._GenFormUser = default(EntityRef<GenFormUser>);
			OnCreated();
		}
		
		[Column(Storage="_TextLogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TextLogId
		{
			get
			{
				return this._TextLogId;
			}
			set
			{
				if ((this._TextLogId != value))
				{
					this.OnTextLogIdChanging(value);
					this.SendPropertyChanging();
					this._TextLogId = value;
					this.SendPropertyChanged("TextLogId");
					this.OnTextLogIdChanged();
				}
			}
		}
		
		[Column(Storage="_LogData", DbType="DateTime NOT NULL")]
		public System.DateTime LogData
		{
			get
			{
				return this._LogData;
			}
			set
			{
				if ((this._LogData != value))
				{
					this.OnLogDataChanging(value);
					this.SendPropertyChanging();
					this._LogData = value;
					this.SendPropertyChanged("LogData");
					this.OnLogDataChanged();
				}
			}
		}
		
		[Column(Storage="_FormulariumId", DbType="Int NOT NULL")]
		public int FormulariumId
		{
			get
			{
				return this._FormulariumId;
			}
			set
			{
				if ((this._FormulariumId != value))
				{
					if (this._Formularium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormulariumIdChanging(value);
					this.SendPropertyChanging();
					this._FormulariumId = value;
					this.SendPropertyChanged("FormulariumId");
					this.OnFormulariumIdChanged();
				}
			}
		}
		
		[Column(Storage="_TextItemId", DbType="Int NOT NULL")]
		public int TextItemId
		{
			get
			{
				return this._TextItemId;
			}
			set
			{
				if ((this._TextItemId != value))
				{
					if (this._TextItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextItemIdChanging(value);
					this.SendPropertyChanging();
					this._TextItemId = value;
					this.SendPropertyChanged("TextItemId");
					this.OnTextItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._GenFormUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Action", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[Association(Name="Formularium_TextLog", Storage="_Formularium", ThisKey="FormulariumId", OtherKey="FormulariumId", IsForeignKey=true)]
		public Formularium Formularium
		{
			get
			{
				return this._Formularium.Entity;
			}
			set
			{
				Formularium previousValue = this._Formularium.Entity;
				if (((previousValue != value) 
							|| (this._Formularium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formularium.Entity = null;
						previousValue.TextLog.Remove(this);
					}
					this._Formularium.Entity = value;
					if ((value != null))
					{
						value.TextLog.Add(this);
						this._FormulariumId = value.FormulariumId;
					}
					else
					{
						this._FormulariumId = default(int);
					}
					this.SendPropertyChanged("Formularium");
				}
			}
		}
		
		[Association(Name="TextItem_TextLog", Storage="_TextItem", ThisKey="TextItemId", OtherKey="TextItemId", IsForeignKey=true)]
		public TextItem TextItem
		{
			get
			{
				return this._TextItem.Entity;
			}
			set
			{
				TextItem previousValue = this._TextItem.Entity;
				if (((previousValue != value) 
							|| (this._TextItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TextItem.Entity = null;
						previousValue.TextLog.Remove(this);
					}
					this._TextItem.Entity = value;
					if ((value != null))
					{
						value.TextLog.Add(this);
						this._TextItemId = value.TextItemId;
					}
					else
					{
						this._TextItemId = default(int);
					}
					this.SendPropertyChanged("TextItem");
				}
			}
		}
		
		[Association(Name="GenFormUser_TextLog", Storage="_GenFormUser", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public GenFormUser GenFormUser
		{
			get
			{
				return this._GenFormUser.Entity;
			}
			set
			{
				GenFormUser previousValue = this._GenFormUser.Entity;
				if (((previousValue != value) 
							|| (this._GenFormUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GenFormUser.Entity = null;
						previousValue.TextLog.Remove(this);
					}
					this._GenFormUser.Entity = value;
					if ((value != null))
					{
						value.TextLog.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("GenFormUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Unit")]
	public partial class Unit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UnitId;
		
		private string _UnitName;
		
		private System.Data.Linq.Binary _VersionTimeStamp;
		
		private decimal _Multiplier;
		
		private string _UnitAbbreviation;
		
		private System.Nullable<int> _Divisor;
		
		private System.Nullable<bool> _IsReference;
		
		private System.Nullable<int> _UnitGroupId;
		
		private EntitySet<Product> _Product;
		
		private EntitySet<ProductSubstance> _ProductSubstance;
		
		private EntitySet<ShapeUnit> _ShapeUnit;
		
		private EntityRef<UnitGroup> _UnitGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnitIdChanging(int value);
    partial void OnUnitIdChanged();
    partial void OnUnitNameChanging(string value);
    partial void OnUnitNameChanged();
    partial void OnVersionTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnVersionTimeStampChanged();
    partial void OnMultiplierChanging(decimal value);
    partial void OnMultiplierChanged();
    partial void OnUnitAbbreviationChanging(string value);
    partial void OnUnitAbbreviationChanged();
    partial void OnDivisorChanging(System.Nullable<int> value);
    partial void OnDivisorChanged();
    partial void OnIsReferenceChanging(System.Nullable<bool> value);
    partial void OnIsReferenceChanged();
    partial void OnUnitGroupIdChanging(System.Nullable<int> value);
    partial void OnUnitGroupIdChanged();
    #endregion
		
		public Unit()
		{
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			this._ProductSubstance = new EntitySet<ProductSubstance>(new Action<ProductSubstance>(this.attach_ProductSubstance), new Action<ProductSubstance>(this.detach_ProductSubstance));
			this._ShapeUnit = new EntitySet<ShapeUnit>(new Action<ShapeUnit>(this.attach_ShapeUnit), new Action<ShapeUnit>(this.detach_ShapeUnit));
			this._UnitGroup = default(EntityRef<UnitGroup>);
			OnCreated();
		}
		
		[Column(Storage="_UnitId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int UnitId
		{
			get
			{
				return this._UnitId;
			}
			set
			{
				if ((this._UnitId != value))
				{
					this.OnUnitIdChanging(value);
					this.SendPropertyChanging();
					this._UnitId = value;
					this.SendPropertyChanged("UnitId");
					this.OnUnitIdChanged();
				}
			}
		}
		
		[Column(Storage="_UnitName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string UnitName
		{
			get
			{
				return this._UnitName;
			}
			set
			{
				if ((this._UnitName != value))
				{
					this.OnUnitNameChanging(value);
					this.SendPropertyChanging();
					this._UnitName = value;
					this.SendPropertyChanged("UnitName");
					this.OnUnitNameChanged();
				}
			}
		}
		
		[Column(Storage="_VersionTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionTimeStamp
		{
			get
			{
				return this._VersionTimeStamp;
			}
			set
			{
				if ((this._VersionTimeStamp != value))
				{
					this.OnVersionTimeStampChanging(value);
					this.SendPropertyChanging();
					this._VersionTimeStamp = value;
					this.SendPropertyChanged("VersionTimeStamp");
					this.OnVersionTimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_Multiplier", DbType="Decimal(38,19) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Multiplier
		{
			get
			{
				return this._Multiplier;
			}
			set
			{
				if ((this._Multiplier != value))
				{
					this.OnMultiplierChanging(value);
					this.SendPropertyChanging();
					this._Multiplier = value;
					this.SendPropertyChanged("Multiplier");
					this.OnMultiplierChanged();
				}
			}
		}
		
		[Column(Storage="_UnitAbbreviation", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string UnitAbbreviation
		{
			get
			{
				return this._UnitAbbreviation;
			}
			set
			{
				if ((this._UnitAbbreviation != value))
				{
					this.OnUnitAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._UnitAbbreviation = value;
					this.SendPropertyChanged("UnitAbbreviation");
					this.OnUnitAbbreviationChanged();
				}
			}
		}
		
		[Column(Storage="_Divisor", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Divisor
		{
			get
			{
				return this._Divisor;
			}
			set
			{
				if ((this._Divisor != value))
				{
					this.OnDivisorChanging(value);
					this.SendPropertyChanging();
					this._Divisor = value;
					this.SendPropertyChanged("Divisor");
					this.OnDivisorChanged();
				}
			}
		}
		
		[Column(Storage="_IsReference", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsReference
		{
			get
			{
				return this._IsReference;
			}
			set
			{
				if ((this._IsReference != value))
				{
					this.OnIsReferenceChanging(value);
					this.SendPropertyChanging();
					this._IsReference = value;
					this.SendPropertyChanged("IsReference");
					this.OnIsReferenceChanged();
				}
			}
		}
		
		[Column(Storage="_UnitGroupId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> UnitGroupId
		{
			get
			{
				return this._UnitGroupId;
			}
			set
			{
				if ((this._UnitGroupId != value))
				{
					if (this._UnitGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitGroupIdChanging(value);
					this.SendPropertyChanging();
					this._UnitGroupId = value;
					this.SendPropertyChanged("UnitGroupId");
					this.OnUnitGroupIdChanged();
				}
			}
		}
		
		[Association(Name="Unit_Product", Storage="_Product", ThisKey="UnitId", OtherKey="UnitId")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		[Association(Name="Unit_ProductSubstance", Storage="_ProductSubstance", ThisKey="UnitId", OtherKey="UnitId")]
		public EntitySet<ProductSubstance> ProductSubstance
		{
			get
			{
				return this._ProductSubstance;
			}
			set
			{
				this._ProductSubstance.Assign(value);
			}
		}
		
		[Association(Name="Unit_ShapeUnit", Storage="_ShapeUnit", ThisKey="UnitId", OtherKey="UnitId")]
		public EntitySet<ShapeUnit> ShapeUnit
		{
			get
			{
				return this._ShapeUnit;
			}
			set
			{
				this._ShapeUnit.Assign(value);
			}
		}
		
		[Association(Name="UnitGroup_Unit", Storage="_UnitGroup", ThisKey="UnitGroupId", OtherKey="UnitGroupId", IsForeignKey=true)]
		public UnitGroup UnitGroup
		{
			get
			{
				return this._UnitGroup.Entity;
			}
			set
			{
				UnitGroup previousValue = this._UnitGroup.Entity;
				if (((previousValue != value) 
							|| (this._UnitGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitGroup.Entity = null;
						previousValue.Unit.Remove(this);
					}
					this._UnitGroup.Entity = value;
					if ((value != null))
					{
						value.Unit.Add(this);
						this._UnitGroupId = value.UnitGroupId;
					}
					else
					{
						this._UnitGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Unit = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Unit = null;
		}
		
		private void attach_ProductSubstance(ProductSubstance entity)
		{
			this.SendPropertyChanging();
			entity.Unit = this;
		}
		
		private void detach_ProductSubstance(ProductSubstance entity)
		{
			this.SendPropertyChanging();
			entity.Unit = null;
		}
		
		private void attach_ShapeUnit(ShapeUnit entity)
		{
			this.SendPropertyChanging();
			entity.Unit = this;
		}
		
		private void detach_ShapeUnit(ShapeUnit entity)
		{
			this.SendPropertyChanging();
			entity.Unit = null;
		}
	}
	
	[Table(Name="dbo.UnitGroup")]
	public partial class UnitGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UnitGroupId;
		
		private string _UnitGroupName;
		
		private System.Data.Linq.Binary _VersionTimeStamp;
		
		private System.Nullable<bool> _AllowsConversion;
		
		private EntitySet<Unit> _Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnitGroupIdChanging(int value);
    partial void OnUnitGroupIdChanged();
    partial void OnUnitGroupNameChanging(string value);
    partial void OnUnitGroupNameChanged();
    partial void OnVersionTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnVersionTimeStampChanged();
    partial void OnAllowsConversionChanging(System.Nullable<bool> value);
    partial void OnAllowsConversionChanged();
    #endregion
		
		public UnitGroup()
		{
			this._Unit = new EntitySet<Unit>(new Action<Unit>(this.attach_Unit), new Action<Unit>(this.detach_Unit));
			OnCreated();
		}
		
		[Column(Storage="_UnitGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int UnitGroupId
		{
			get
			{
				return this._UnitGroupId;
			}
			set
			{
				if ((this._UnitGroupId != value))
				{
					this.OnUnitGroupIdChanging(value);
					this.SendPropertyChanging();
					this._UnitGroupId = value;
					this.SendPropertyChanged("UnitGroupId");
					this.OnUnitGroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_UnitGroupName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string UnitGroupName
		{
			get
			{
				return this._UnitGroupName;
			}
			set
			{
				if ((this._UnitGroupName != value))
				{
					this.OnUnitGroupNameChanging(value);
					this.SendPropertyChanging();
					this._UnitGroupName = value;
					this.SendPropertyChanged("UnitGroupName");
					this.OnUnitGroupNameChanged();
				}
			}
		}
		
		[Column(Storage="_VersionTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionTimeStamp
		{
			get
			{
				return this._VersionTimeStamp;
			}
			set
			{
				if ((this._VersionTimeStamp != value))
				{
					this.OnVersionTimeStampChanging(value);
					this.SendPropertyChanging();
					this._VersionTimeStamp = value;
					this.SendPropertyChanged("VersionTimeStamp");
					this.OnVersionTimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_AllowsConversion", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> AllowsConversion
		{
			get
			{
				return this._AllowsConversion;
			}
			set
			{
				if ((this._AllowsConversion != value))
				{
					this.OnAllowsConversionChanging(value);
					this.SendPropertyChanging();
					this._AllowsConversion = value;
					this.SendPropertyChanged("AllowsConversion");
					this.OnAllowsConversionChanged();
				}
			}
		}
		
		[Association(Name="UnitGroup_Unit", Storage="_Unit", ThisKey="UnitGroupId", OtherKey="UnitGroupId")]
		public EntitySet<Unit> Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				this._Unit.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Unit(Unit entity)
		{
			this.SendPropertyChanging();
			entity.UnitGroup = this;
		}
		
		private void detach_Unit(Unit entity)
		{
			this.SendPropertyChanging();
			entity.UnitGroup = null;
		}
	}
	
	[Table(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserRoleId;
		
		private int _UserId;
		
		private int _RoleId;
		
		private EntityRef<GenFormUser> _GenFormUser;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserRoleIdChanging(int value);
    partial void OnUserRoleIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public UserRole()
		{
			this._GenFormUser = default(EntityRef<GenFormUser>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[Column(Storage="_UserRoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserRoleId
		{
			get
			{
				return this._UserRoleId;
			}
			set
			{
				if ((this._UserRoleId != value))
				{
					this.OnUserRoleIdChanging(value);
					this.SendPropertyChanging();
					this._UserRoleId = value;
					this.SendPropertyChanged("UserRoleId");
					this.OnUserRoleIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._GenFormUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Association(Name="GenFormUser_UserRole", Storage="_GenFormUser", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public GenFormUser GenFormUser
		{
			get
			{
				return this._GenFormUser.Entity;
			}
			set
			{
				GenFormUser previousValue = this._GenFormUser.Entity;
				if (((previousValue != value) 
							|| (this._GenFormUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GenFormUser.Entity = null;
						previousValue.UserRole.Remove(this);
					}
					this._GenFormUser.Entity = value;
					if ((value != null))
					{
						value.UserRole.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("GenFormUser");
				}
			}
		}
		
		[Association(Name="Role_UserRole", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRole.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRole.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
